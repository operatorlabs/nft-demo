{
  "openapi": "3.0.0",
  "security": [{ "API_KEY": [] }],
  "info": {
    "title": "Reservoir API",
    "version": "5.296.1",
    "description": "You are viewing the reference docs for the Reservoir API.        For a more complete overview with guides and examples, check out the <a href='https://reservoirprotocol.github.io'>Reservoir Protocol Docs</a>."
  },
  "tags": [],
  "paths": {
    "/collections/activity/v6": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsActivityV6",
        "description": "This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned. Max limit is 50 when `includedMetadata=true` otherwise max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, metadata is included in the response. If true, max limit is 50. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Activity"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV6Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/activity/v6": {
      "get": {
        "summary": "Users activity",
        "operationId": "getUsersActivityV6",
        "description": "This API can be used to build a feed for a user including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.",
        "parameters": [
          {
            "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              },
              { "type": "string", "x-convert": { "case": "lower" } }
            ],
            "name": "collection",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "x-convert": { "case": "lower" } }
            }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency.",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Activity"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV6Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/tokens/{token}/activity/v5": {
      "get": {
        "summary": "Token activity",
        "operationId": "getTokensTokenActivityV5",
        "description": "This API can be used to build a feed for a token activity including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Amount of items returned. Default and max is 20. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response. The blockchain event time is `eventTimestamp`. The event time recorded is `createdAt`. defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Activity"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV6Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collection}/attributes/all/v4": {
      "get": {
        "summary": "All attributes",
        "operationId": "getCollectionsCollectionAttributesAllV4",
        "description": "Use this API to see all possible attributes within a collection.\n\n- `floorAskPrice` for all attributes might not be returned on collections with more than 10k tokens. \n\n- Attributes are case sensitive.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Attributes"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesAllV4Response"
                }
              }
            }
          }
        },
        "x-order": 2
      }
    },
    "/collections/{collection}/attributes/explore/v5": {
      "get": {
        "summary": "Explore attributes",
        "operationId": "getCollectionsCollectionAttributesExploreV5",
        "description": "Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAskPrices` by default.\n\n- `floorAskPrices` will not be returned on attributes with more than 10k tokens.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token-id. Example: `1`",
            "name": "tokenId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, range traits will be excluded from the response. defaults to **false**",
            "name": "excludeRangeTraits",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, number traits will be excluded from the response. defaults to **false**",
            "name": "excludeNumberTraits",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filter to a particular attribute key. Example: `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Max number of items returned in the response. defaults to **1**",
            "name": "maxFloorAskPrices",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Max number of items returned in the response. defaults to **0**",
            "name": "maxLastSells",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Default limit is 20. Max limit is 5000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 5000 }
          }
        ],
        "tags": ["Attributes"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesExploreV5Response"
                }
              }
            }
          }
        },
        "x-order": 15
      }
    },
    "/chain/stats/v1": {
      "get": {
        "summary": "Chain Stats",
        "operationId": "getChainStatsV1",
        "description": "Get chain mint and sales stats for 1 and 7 days",
        "tags": ["Chain"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getChainStatsV5Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/collections/v6": {
      "get": {
        "summary": "Collections",
        "operationId": "getCollectionsV6",
        "description": "Use this API to explore a collection's metadata and statistics (sales, volume, etc).",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection slug. Example: `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Search for collections that match a string. Example: `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Maximum floor price of the collection",
            "name": "maxFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Minumum floor price of the collection",
            "name": "minFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, attributes will be included in the response. Must filter by `id` or `slug` to a particular collection.",
            "name": "includeAttributes",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. Must filter by `id` or `slug` to a particular collection.",
            "name": "includeSalesCount",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, mint data for the collection will be included in the response. defaults to **false**",
            "name": "includeMintStages",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. Options are `#DayVolume`, `createdAt`, or `floorAskPrice` defaults to **allTimeVolume**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1DayVolume",
                "7DayVolume",
                "30DayVolume",
                "allTimeVolume",
                "createdAt",
                "floorAskPrice"
              ]
            }
          },
          {
            "description": "Amount of items returned in response. Default and max limit is 20. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV6Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/collections/top-selling/v1": {
      "get": {
        "summary": "Top Selling Collections",
        "operationId": "getCollectionsTopsellingV1",
        "description": "Get top selling and minting collections",
        "parameters": [
          {
            "description": "Start time in unix timestamp. Must be less than 2 weeks ago. defaults to 24 hours defaults to **1689781129**",
            "x-constraint": { "greater": 1688657929 },
            "name": "startTime",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "End time in unix timestamp. defaults to now",
            "name": "endTime",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Fill types to aggregate from (sale, mint, any) defaults to **any**",
            "x-convert": { "case": "lower" },
            "name": "fillType",
            "in": "query",
            "schema": { "type": "string", "enum": ["sale", "mint", "any"] }
          },
          {
            "description": "Amount of items returned in response. Default is 25 and max is 50 defaults to **25**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          },
          {
            "description": "If true, 8 recent sales will be included in the response defaults to **false**",
            "name": "includeRecentSales",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTopSellingCollectionsV5Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/search/collections/v2": {
      "get": {
        "summary": "Search collections",
        "operationId": "getSearchCollectionsV2",
        "parameters": [
          {
            "description": "Lightweight search for collections that match a string. Example: `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular collection set",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getSearchCollectionsV2Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/collections/{collection}/supported-marketplaces/v1": {
      "get": {
        "summary": "Supported marketplaces by collection",
        "operationId": "getCollectionsCollectionSupportedmarketplacesV1",
        "description": "The ReservoirKit `ListModal` client utilizes this API to identify the marketplace(s) it can list on.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/Model226" } }
            }
          }
        },
        "x-order": 5
      }
    },
    "/users/{user}/collections/v3": {
      "get": {
        "summary": "User collections",
        "operationId": "getUsersUserCollectionsV3",
        "description": "Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, number of tokens with bids will be returned in the response. defaults to **false**",
            "name": "includeLiquidCount",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use offset to request the next batch of items. Max is 10,000. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. max limit is 100. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "Input any ERC20 address to return result in given currency.",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserCollectionsV3Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/collections/{collection}/community/v1": {
      "put": {
        "summary": "Set a community for a specific collection",
        "operationId": "putCollectionsCollectionCommunityV1",
        "description": "This API requires an administrator API for execution. Explore and try the `/collections-sets/v1` or `/contracts-sets/v1` endpoints. Please contact technical support with more questions.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`. Requires an authorized api key to be passed.",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model361" }
            }
          }
        },
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/collections-sets/v1": {
      "post": {
        "summary": "Create Collection Set",
        "operationId": "postCollectionssetsV1",
        "description": "Array of collections to gather in a set. Adding or removing a collection will change the response. You may use this set when `collectionSetId` is an available param. An example is below.\n\n`\"collections\": \"0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623\", \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\"`\n\n`\"collectionsSetId\": \"8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65\"`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model394" }
            }
          }
        },
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/postCreateCollectionsSetV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/contracts-sets/v1": {
      "post": {
        "summary": "Create Contracts Set",
        "operationId": "postContractssetsV1",
        "description": "Array of contracts to gather in a set. Adding or removing a contract will change the response. You may use this set when contractSetId is an available param.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model396" }
            }
          }
        },
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/postCreateContractsSetV1Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/refresh/v2": {
      "post": {
        "summary": "Refresh Collection",
        "operationId": "postCollectionsRefreshV2",
        "description": "Use this API to refresh a collection metadata. Only use this endpoint when you notice multiple tokens with incorrect metadata. Otherwise, refresh single token metadata. Collections with over 30,000 tokens require admin key override, so please contact technical support for assistance.\n\n Collection metadata is automatically updated at 23:30 UTC daily for:\n\n- Top 500 Collection by 24hr Volume\n\n- Collections Minted 1 Day Ago\n\n- Collections Minted 7 Days Ago\n\n Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model417" }
            }
          }
        },
        "tags": ["Collections"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/cross-posting-orders/v1": {
      "get": {
        "summary": "Check cross posting status",
        "operationId": "getCrosspostingordersV1",
        "description": "This API can be used to check the status of cross posted listings and bids.\n\n Input your `crossPostingOrderId` into the `ids` param and submit for the status. \n\n The `crossPostingOrderId` is returned in the `execute/bids` and `execute/asks` response as well as the `onProgess` callback for the SDK. \n\n Note: ReservoirKit does not return a `crossPostingOrderId`.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "number" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "number" } }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          }
        ],
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCrossPostingOrdersV1Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/transactions/{txHash}/synced/v1": {
      "get": {
        "summary": "Transaction status",
        "operationId": "getTransactionsTxhashSyncedV1",
        "description": "Get a boolean response on whether a particular transaction was synced or not.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          }
        ],
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTransactionSyncedV1Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/order/v4": {
      "post": {
        "summary": "Submit signed orders",
        "operationId": "postOrderV4",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "signature",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model405" }
            }
          }
        },
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/postOrderV4Response" }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/execute/bid/v5": {
      "post": {
        "summary": "Create bids (offers)",
        "operationId": "postExecuteBidV5",
        "description": "Generate bids and submit them to multiple marketplaces.\n\n Notes:\n\n- Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.\n\n- We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model426" }
            }
          }
        },
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBidV5Response"
                }
              }
            }
          }
        },
        "x-order": 11
      }
    },
    "/execute/cancel/v3": {
      "post": {
        "summary": "Cancel orders",
        "operationId": "postExecuteCancelV3",
        "description": "Cancel existing orders on any marketplace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model462" }
            }
          }
        },
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteCancelV3Response"
                }
              }
            }
          }
        },
        "x-order": 11
      }
    },
    "/execute/list/v5": {
      "post": {
        "summary": "Create asks (listings)",
        "operationId": "postExecuteListV5",
        "description": "Generate listings and submit them to multiple marketplaces.\n\n Notes:\n\n- Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.\n\n- We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model480" }
            }
          }
        },
        "tags": ["Create Orders (list & bid)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteListV5Response"
                }
              }
            }
          }
        },
        "x-order": 11
      }
    },
    "/events/asks/v3": {
      "get": {
        "summary": "Asks status changes",
        "operationId": "getEventsAsksV3",
        "description": "Every time an ask of a collection or token changes (i.e. the ‘listing’), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was canceled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best listing changes. So if a new listing happens without changing the best listing, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.\n\n- Private listings (asks) will not appear in the results.",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max is 1000 defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAsksEventsV3Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/bids/v3": {
      "get": {
        "summary": "Bid status changes",
        "operationId": "getEventsBidsV3",
        "description": "Every time a bid of a collection or token changes (i.e. the ‘offer’), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new offer at a lower price\n\n- `expiry` > the previous best offer expired\n\n- `sale` > the previous best offer was filled\n\n- `cancel` > the previous best offer was canceled\n\n- `balance-change` > the best offer was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best offer was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best bid changes. So if a new bid happens without changing the best bid, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getBidEventsV3Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/collections/floor-ask/v2": {
      "get": {
        "summary": "Collection floor changes",
        "operationId": "getEventsCollectionsFlooraskV2",
        "description": "Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was cancelled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will exclude floor asks on flagged tokens. (only supported when `normalizeRoyalties` is false) defaults to **false**",
            "name": "excludeFlaggedTokens",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsFloorAskV2Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/collections/top-bid/v2": {
      "get": {
        "summary": "Collection top bid changes",
        "operationId": "getEventsCollectionsTopbidV2",
        "description": "Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new bid at a higher price\n\n- `expiry` > the previous top bid expired\n\n- `sale` > the previous top bid was accepted\n\n- `cancel` > the previous top bid was cancelled\n\n- `balance-change` > the top bid was invalidated due NFT no longer available\n\n- `approval-change` > the top bid was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the top bid changes. So if a new order or sale happens without changing the top bid, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsTopbidV2Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/tokens/floor-ask/v4": {
      "get": {
        "summary": "Token price changes",
        "operationId": "getEventsTokensFlooraskV4",
        "description": "Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was cancelled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Events"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensFloorAskV4Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/execute/buy/v7": {
      "post": {
        "summary": "Buy tokens (fill listings)",
        "operationId": "postExecuteBuyV7",
        "description": "Use this API to fill listings. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model448" }
            }
          }
        },
        "tags": ["Fill Orders (buy & sell)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV7Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/execute/sell/v7": {
      "post": {
        "summary": "Sell tokens (accept bids)",
        "operationId": "postExecuteSellV7",
        "description": "Use this API to accept bids. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model495" }
            }
          }
        },
        "tags": ["Fill Orders (buy & sell)"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteSellV7Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/api-keys/{key}/rate-limits": {
      "get": {
        "summary": "Get rate limits for the given API key",
        "operationId": "getApikeysKeyRatelimits",
        "description": "Get the rate limits for the given API key. Note: API keys are not universal across all available chains; please make a different key for every chain.",
        "parameters": [
          {
            "description": "The API key",
            "x-format": { "guid": true },
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Management"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/Model88" } }
            }
          }
        }
      }
    },
    "/tokens/flag/v1": {
      "post": {
        "summary": "Update token flag status",
        "operationId": "postTokensFlagV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model502" }
            }
          }
        },
        "tags": ["Management"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/management/orders/simulate/v1": {
      "post": {
        "summary": "Simulate any given order",
        "operationId": "postManagementOrdersSimulateV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model506" }
            }
          }
        },
        "tags": ["Management"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/execute/auth-signature/v1": {
      "post": {
        "summary": "Attach a signature to an existing auth challenge",
        "operationId": "postExecuteAuthsignatureV1",
        "parameters": [
          {
            "description": "Signature to attach to the auth challenge",
            "name": "signature",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model418" }
            }
          }
        },
        "tags": ["Misc"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/postAuthSignatureV1Response"
                }
              }
            }
          }
        },
        "x-order": 50
      }
    },
    "/execute/cancel-signature/v1": {
      "post": {
        "summary": "Off-chain cancel orders",
        "operationId": "postExecuteCancelsignatureV1",
        "description": "If your order was created using the Seaport Oracle to allow off chain & gasless cancellations, you can just use the Kit's cancel modals, SDK's `cancelOrder`, or `/execute/cancel/`. Those tools will automatically access this endpoint for an oracle cancellation without you directly calling this endpoint.",
        "parameters": [
          {
            "description": "Cancellation signature",
            "name": "signature",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Optional auth token used instead of the signature",
            "name": "auth",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model468" }
            }
          }
        },
        "tags": ["Misc"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 50
      }
    },
    "/execute/permit-signature/v1": {
      "post": {
        "summary": "Attach a signature to an existing permit",
        "operationId": "postExecutePermitsignatureV1",
        "parameters": [
          {
            "description": "Signature to attach to the permit",
            "name": "signature",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model485" }
            }
          }
        },
        "tags": ["Misc"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 50
      }
    },
    "/execute/results/v1": {
      "post": {
        "summary": "Send the success status of an execution",
        "operationId": "postExecuteResultsV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model486" }
            }
          }
        },
        "tags": ["Misc"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/postExecuteResultsV1Response"
                }
              }
            }
          }
        },
        "x-order": 50
      }
    },
    "/oracle/collections/bid-ask-midpoint/v1": {
      "get": {
        "summary": "Collection mid-ask midpoint",
        "operationId": "getOracleCollectionsBidaskmidpointV1",
        "description": "Get a signed message of any collection's bid-ask midpoint (spot or twap). This is approximation of the colletion price. The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["Oracle"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionBidAskMidpointOracleV1Response"
                }
              }
            }
          }
        },
        "x-order": 12
      }
    },
    "/oracle/collections/floor-ask/v6": {
      "get": {
        "summary": "Collection floor",
        "operationId": "getOracleCollectionsFlooraskV6",
        "description": "Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "name": "eip3668Calldata",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "If true, will use the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["Oracle"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionFloorAskOracleV6Response"
                }
              }
            }
          }
        },
        "x-order": 12
      }
    },
    "/oracle/collections/top-bid/v3": {
      "get": {
        "summary": "Collection top bid oracle",
        "operationId": "getOracleCollectionsTopbidV3",
        "description": "Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["Oracle"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionBidAskMidpointOracleV1Response"
                }
              }
            }
          }
        },
        "x-order": 12
      }
    },
    "/oracle/tokens/status/v3": {
      "get": {
        "summary": "Token status oracle",
        "operationId": "getOracleTokensStatusV3",
        "description": "Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
            ],
            "name": "tokens",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
              },
              "minItems": 1
            }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["Oracle"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenStatusOracleV2Response"
                }
              }
            }
          }
        },
        "x-order": 12
      }
    },
    "/orders/asks/v5": {
      "get": {
        "summary": "Asks (listings)",
        "operationId": "getOrdersAsksV5",
        "description": "Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.\n\n Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 80
            }
          },
          {
            "description": "activeª^º = currently valid\ninactiveª^ = temporarily invalid\nexpiredª^, canceledª^, filledª^ = permanently invalid\nanyªº = any status\nª when an `id` is passed\n^ when a `maker` is passed\nº when a `contract` is passed",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
                },
                "collectionFormat": "multi",
                "name": "sources"
              },
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              }
            ],
            "name": "sources",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              },
              "maxItems": 80
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, private orders are included in the response. defaults to **false**",
            "name": "includePrivate",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, dynamic pricing data will be returned in the response. defaults to **false**",
            "name": "includeDynamicPricing",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to **false**",
            "name": "excludeEOA",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
                },
                "collectionFormat": "multi",
                "name": "excludeSources"
              },
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              }
            ],
            "name": "excludeSources",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              },
              "maxItems": 80
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, Sorting by price allowed only when filtering by token defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "price", "updatedAt"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAsksV4Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/bids/v6": {
      "get": {
        "summary": "Bids (offers)",
        "operationId": "getOrdersBidsV6",
        "description": "Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.\n\n There are a different kind of bids than can be returned:\n\n- Inputting a 'contract' will return token and attribute bids.\n\n- Inputting a 'collection-id' will return collection wide bids./n/n Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Must set `sources=blur.io` to reveal maker's blur bids. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`(Collection must be passed as well when filtering by attribute)",
            "name": "attribute",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 80
            }
          },
          {
            "description": "activeª^º = currently valid\ninactiveª^ = temporarily invalid\nexpiredª^, canceledª^, filledª^ = permanently invalid\nanyªº = any status\nª when an `id` is passed\n^ when a `maker` is passed\nº when a `contract` is passed",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
                },
                "collectionFormat": "multi",
                "name": "sources"
              },
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              }
            ],
            "name": "sources",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              },
              "maxItems": 80
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. Set `sources=blur.io` and make this `true` to reveal individual blur bids. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, the depth of each order is included in the response. defaults to **false**",
            "name": "includeDepth",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to **false**",
            "name": "excludeEOA",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
                },
                "collectionFormat": "multi",
                "name": "excludeSources"
              },
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              }
            ],
            "name": "excludeSources",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
              },
              "maxItems": 80
            }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "price", "updatedAt"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV5Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/depth/v1": {
      "get": {
        "summary": "Orders depth",
        "operationId": "getOrdersDepthV1",
        "description": "Get the depth of a token or collection.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "side",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["buy", "sell"] }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`.",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`.",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Return all prices in this currency.",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersDepthV1Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/users/{user}/top-bids/v4": {
      "get": {
        "summary": "User Top Bids",
        "operationId": "getOrdersUsersUserTopbidsV4",
        "description": "Return the top bids for the given user tokens. Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              { "type": "string", "x-convert": { "case": "lower" } },
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              }
            ],
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, urls will only be returned for optimized sources that support royalties. defaults to **false**",
            "name": "optimizeCheckoutURL",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **true**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to **false**",
            "name": "excludeEOA",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will return the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order of the items are returned in the response. Options are `topBidValue`, `dateCreated`, `orderExpiry`, and `floorDifferencePercentage`. defaults to **topBidValue**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topBidValue",
                "dateCreated",
                "orderExpiry",
                "floorDifferencePercentage"
              ]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "Amount of items returned in response. Max limit is 100 defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "Amount of tokens considered. Min is 1000, max is default. defaults to **10000**",
            "name": "sampleSize",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1000, "maximum": 100000 }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Orders"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTopBidsV4Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/owners/v2": {
      "get": {
        "summary": "Owners",
        "operationId": "getOwnersV2",
        "description": "Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute.",
        "parameters": [
          {
            "description": "Filter to a particular collection set id. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+:[0-9]+$|^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0 }
          },
          {
            "description": "Amount of items returned in response. Max limit is 500. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 500 }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Owners"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getOwnersV2Response" }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/owners/common-collections/v1": {
      "get": {
        "summary": "Common Collections",
        "operationId": "getOwnersCommoncollectionsV1",
        "description": "This API can be used to find top common collections from an array of owners.",
        "parameters": [
          {
            "description": "Array of owner addresses. Max limit is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of owner addresses. Max limit is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "owners"
              },
              {
                "type": "string",
                "description": "Array of owner addresses. Max limit is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "owners",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "description": "Amount of collections returned in response. Max limit is 50. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          }
        ],
        "tags": ["Owners"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCommonCollectionsOwnersV1Response"
                }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/owners/cross-collections/v1": {
      "get": {
        "summary": "Owners intersection",
        "operationId": "getOwnersCrosscollectionsV1",
        "description": "Find which addresses own the most of a group of collections.",
        "parameters": [
          {
            "description": "Filter to one or more collections. Max limit is 5. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to one or more collections. Max limit is 5. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 5,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "collections"
              },
              {
                "type": "string",
                "description": "Filter to one or more collections. Max limit is 5. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "collections",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 5
            }
          },
          {
            "description": "Amount of owners returned in response. Max limit is 50. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          }
        ],
        "tags": ["Owners"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCrossCollectionsOwnersV1Response"
                }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/collections/{collection}/owners-distribution/v1": {
      "get": {
        "summary": "Owners Collection Distribution",
        "operationId": "getCollectionsCollectionOwnersdistributionV1",
        "description": "This API can be used to show what the distribution of owners in a collection looks like.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Owners"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionOwnersDistributionV1Response"
                }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/collections-sets/{collectionsSetId}/owners-distribution/v1": {
      "get": {
        "summary": "Owners Collection Set Distribution",
        "operationId": "getCollectionssetsCollectionssetidOwnersdistributionV1",
        "description": "This API can be used to show what the distribution of owners in a collections set id looks like.",
        "parameters": [
          {
            "description": "Filter to a particular collections set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Owners"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsSetOwnersDistributionV1Response"
                }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/redirect/collections/{collection}/image/v1": {
      "get": {
        "summary": "Redirect to the given collection image",
        "operationId": "getRedirectCollectionsCollectionImageV1",
        "parameters": [
          {
            "description": "Redirect to the given collection image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}(?::\\d+:\\d+)?$"
            }
          }
        ],
        "tags": ["Redirects"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53
      }
    },
    "/redirect/currency/{address}/icon/v1": {
      "get": {
        "summary": "Redirect response to the given currency address icon",
        "operationId": "getRedirectCurrencyAddressIconV1",
        "parameters": [
          {
            "description": "Redirect to the given currency address icon. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "address",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Redirects"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53
      }
    },
    "/redirect/sources/{source}/logo/v2": {
      "get": {
        "summary": "Redirect response to the given source logo",
        "operationId": "getRedirectSourcesSourceLogoV2",
        "parameters": [
          {
            "description": "Domain of the source. Example `opensea.io`",
            "name": "source",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Redirects"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53
      }
    },
    "/redirect/tokens/{token}/image/v1": {
      "get": {
        "summary": "Redirect response to the given token image",
        "operationId": "getRedirectTokensTokenImageV1",
        "parameters": [
          {
            "description": "Redirect to the given token image. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Image size: 'small', 'medium', or 'large'.  defaults to **medium**",
            "name": "imageSize",
            "in": "query",
            "schema": { "type": "string", "enum": ["small", "medium", "large"] }
          }
        ],
        "tags": ["Redirects"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53
      }
    },
    "/redirect/sources/{source}/tokens/{token}/link/v2": {
      "get": {
        "summary": "Redirect response to the given source token page",
        "operationId": "getRedirectSourcesSourceTokensTokenLinkV2",
        "parameters": [
          {
            "description": "Domain of the source. Example `opensea.io`",
            "name": "source",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Redirect to the given token page. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          }
        ],
        "tags": ["Redirects"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53
      }
    },
    "/sales/v5": {
      "get": {
        "summary": "Sales",
        "operationId": "getSalesV5",
        "description": "Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Array of tokens. Max limit is 20. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Max limit is 20. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Max limit is 20. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "If enabled, also include token metadata in the response. Default is false.",
            "name": "includeTokenMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If enabled, include sales that have been deleted. In some cases the backfilling process deletes sales that are no longer relevant or have been reverted. defaults to **false**",
            "name": "includeDeleted",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Order the items are returned in the response. Options are `price`, `time`, and `updated_at`. Default is `time`.",
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["price", "time", "updated_at"]
            }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive). Relative to the orderBy time filters.",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive). Relative to the orderBy time filters.",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **100**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["Sales"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getSalesV4Response" }
              }
            }
          }
        },
        "x-order": 8
      }
    },
    "/sources/v1": {
      "get": {
        "summary": "Sources List",
        "operationId": "getSourcesV1",
        "description": "This API returns a list of sources",
        "parameters": [
          {
            "description": "Order of the items are returned in the response. defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["domain", "createdAt"] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Filter to a particular domain. Example: `x2y2.io`",
            "x-convert": { "case": "lower" },
            "name": "domain",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["Sources"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getSourcesV1Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/stats/v2": {
      "get": {
        "summary": "Stats",
        "operationId": "getStatsV2",
        "description": "Get aggregate stats for a particular set (collection, attribute or single token)",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/stats/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/stats/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Stats"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getStatsV2Response" }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/collections/daily-volumes/v1": {
      "get": {
        "summary": "Daily collection volume",
        "operationId": "getCollectionsDailyvolumesV1",
        "description": "Get date, volume, rank and sales count for each collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. defaults to **60**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "The start timestamp you want to filter on (UTC)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "The end timestamp you want to filter on (UTC)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "tags": ["Stats"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getDailyVolumesV1Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/tokens/v6": {
      "get": {
        "summary": "Tokens",
        "operationId": "getTokensV6",
        "description": "Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token by name. This is case sensitive. Example: `token #1`",
            "name": "tokenName",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Attributes are case sensitive. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/tokens/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source)",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `www.apecoinmarketplace.com`. For a native marketplace, return all tokens listed on this marketplace, even if better prices are available on other marketplaces.",
            "name": "nativeSource",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get tokens with a min rarity rank (inclusive), no rarity rank for collections over 100k",
            "name": "minRarityRank",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Get tokens with a max rarity rank (inclusive), no rarity rank for collections over 100k",
            "name": "maxRarityRank",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Get tokens with a min floor ask price (inclusive); use native currency",
            "name": "minFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get tokens with a max floor ask price (inclusive); use native currency",
            "name": "maxFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Allowed only with collection and tokens filtering!\n-1 = All tokens (default)\n0 = Non flagged tokens\n1 = Flagged tokens",
            "name": "flagStatus",
            "in": "query",
            "schema": { "type": "number", "enum": [-1, 0, 1] }
          },
          {
            "description": "Order the items are returned in the response. Options are `floorAskPrice`, `tokenId`, and `rarity`. No rarity rank for collections over 100k. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "tokenId", "rarity"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Filter to tokens with a listing in a particular currency. Max limit is 50. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to tokens with a listing in a particular currency. Max limit is 50. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "currencies"
              },
              {
                "type": "string",
                "description": "Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "currencies",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 100. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, blur bids will be excluded from top bid / asks. defaults to **false**",
            "name": "excludeEoa",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, attributes will be returned in the response. defaults to **false**",
            "name": "includeAttributes",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, quantity filled and quantity remaining will be returned in the response. defaults to **false**",
            "name": "includeQuantity",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, dynamic pricing data will be returned in the response. defaults to **false**",
            "name": "includeDynamicPricing",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, last sale data including royalties paid will be returned in the response. defaults to **false**",
            "name": "includeLastSale",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV6Response" }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/tokens/bootstrap/v1": {
      "get": {
        "summary": "Token Events Bootstrap",
        "operationId": "getTokensBootstrapV1",
        "description": "Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **500**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 500 }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensBootstrapV1Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/tokens/floor/v1": {
      "get": {
        "summary": "Token Prices",
        "operationId": "getTokensFloorV1",
        "description": "This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensFloorV1Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/tokens/ids/v1": {
      "get": {
        "summary": "Token IDs",
        "operationId": "getTokensIdsV1",
        "description": "This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. ",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "-1 = All tokens (default)\n0 = Non flagged tokens\n1 = Flagged tokens",
            "name": "flagStatus",
            "in": "query",
            "schema": { "type": "number", "enum": [-1, 0, 1] }
          },
          {
            "description": "Amount of items returned in response. Max limit is 10,000. defaults to **100**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 10000 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensIdsV1Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/tokens/flag/changes/v1": {
      "get": {
        "summary": "Flagged Tokens",
        "operationId": "getTokensFlagChangesV1",
        "description": "This API return the recent flagged/un-flagged tokens across all collections sorted by change time",
        "parameters": [
          {
            "description": "-1 = All tokens (default)\n0 = Non flagged tokens\n1 = Flagged tokens",
            "name": "flagStatus",
            "in": "query",
            "schema": { "type": "number", "enum": [-1, 0, 1] }
          },
          {
            "description": "Amount of items returned in response. Max is 200. defaults to **200**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 200 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getFlaggedTokensV1Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/users/{user}/tokens/v7": {
      "get": {
        "summary": "User Tokens",
        "operationId": "getUsersUserTokensV7",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. Options are `acquiredAt` and `lastAppraisalValue`. defaults to **acquiredAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["acquiredAt", "lastAppraisalValue"]
            }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Max limit is 200. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 200 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, attributes will be returned in the response. defaults to **false**",
            "name": "includeAttributes",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, last sale data including royalties paid will be returned in the response. defaults to **false**",
            "name": "includeLastSale",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will return the collection non flagged floor ask. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV7Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/token-sets/v2": {
      "post": {
        "summary": "Create token set",
        "operationId": "postTokensetsV2",
        "description": "Use this API to create a `tokenSetId` to call specific tokens from a collection. Adding or removing a tokenId will change the response. See an example below.\n\n Input of `0xd774557b647330c91bf44cfeab205095f7e6c367:1` and `0xd774557b647330c91bf44cfeab205095f7e6c367:2`\n\n Output of `list:0xd774557b647330c91bf44cfeab205095f7e6c367:0xb6fd98eeb7e08fc521f11511289afe4d8e873fd7a3fb76ab757fa47c23f596e9`\n\n Notes:\n\n- Include `list:` when using this `tokenSetId` for it to work successfully.\n\n- You cannot adjust tokens within a `tokenSetId`. Please create a new set.\n\n- Use the `/tokens/ids` endpoint to get a list of tokens within a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model414" }
            }
          }
        },
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/Model239" } }
            }
          }
        },
        "x-order": 13
      }
    },
    "/tokens/refresh/v1": {
      "post": {
        "summary": "Refresh Token",
        "operationId": "postTokensRefreshV1",
        "description": "Token metadata is never automatically refreshed, but may be manually refreshed with this API.\n\nCaution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model503" }
            }
          }
        },
        "tags": ["Tokens"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "x-order": 13
      }
    },
    "/transfers/v3": {
      "get": {
        "summary": "Historical token transfers",
        "operationId": "getTransfersV3",
        "description": "Get recent transfers for a contract or token.",
        "parameters": [
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Order the items are returned in the response. Options are `timestamp`, and `updated_at`. Default is `timestamp`.",
            "name": "orderBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["timestamp", "updated_at"] }
          },
          {
            "description": "Max limit is 100. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["Transfers"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTransfersV3Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/transfers/bulk/v1": {
      "get": {
        "summary": "Bulk historical transfers",
        "operationId": "getTransfersBulkV1",
        "description": "Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Amount of items returned in response. Max limit is 1000. defaults to **100**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Order the items are returned in the response. Options are `timestamp`, and `updated_at`. Default is `timestamp`.",
            "name": "orderBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["timestamp", "updated_at"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["Transfers"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTransfersBulkV1Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/admin/get-marketplaces": {
      "get": {
        "summary": "Get supported marketplaces",
        "operationId": "getAdminGetmarketplaces",
        "tags": ["x-admin"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getMarketplacesv1Resp"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/admin/open-api": {
      "get": {
        "summary": "Get swagger json in OpenApi V3",
        "operationId": "getAdminOpenapi",
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/rate-limit-rules": {
      "get": {
        "summary": "Get rate limit rules",
        "operationId": "getAdminRatelimitrules",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The route to get rules for",
            "name": "route",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/assets/v1": {
      "get": {
        "summary": "Return the asset based on the given param",
        "operationId": "getAssetsV1",
        "parameters": [
          {
            "name": "asset",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 3
      }
    },
    "/admin/get-api-key/{key}": {
      "get": {
        "summary": "Get the associated info for the given API key",
        "operationId": "getAdminGetapikeyKey",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "The API key",
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-admin"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getApiKeyRateLimitsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/search/activities/v1": {
      "get": {
        "summary": "Search activity",
        "operationId": "getSearchActivitiesV1",
        "description": "This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.",
        "parameters": [
          {
            "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Max limit is 50. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Array of collections. Max limit is 50. Example: `collections[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of collections. Max limit is 50. Example: `collections[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 50,
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collections"
              },
              {
                "type": "string",
                "description": "Array of collections. Max limit is 50. Example: `collections[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "collections",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "x-convert": { "case": "lower" } },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/collections/activity/v6?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Array of source domains. Max limit is 50. Example: `sources[0]: opensea.io`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of source domains. Max limit is 50. Example: `sources[0]: opensea.io`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "sources"
              },
              {
                "type": "string",
                "description": "Array of source domains. Max limit is 50. Example: `sources[0]: opensea.io`",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "sources",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Max is 50. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "description": "Amount of items returned. Max limit is 50 when `includedMetadata=true` otherwise max limit is 1000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Order the items are returned in the response. The blockchain event time is `timestamp`. The event time recorded is `createdAt`. defaults to **timestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["timestamp", "createdAt"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-admin"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getSearchActivitiesV1Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/api-keys": {
      "post": {
        "summary": "Generate API Key",
        "operationId": "postApikeys",
        "description": "The API key can be used in every route, by setting it as a request header **x-api-key**.\n\n<a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "appName": {
                    "description": "The name of your app",
                    "type": "string"
                  },
                  "email": {
                    "description": "An e-mail address where you can be reached, in case of issues, to avoid service disruption",
                    "type": "string",
                    "x-format": { "email": true }
                  },
                  "website": {
                    "description": "The website of your project",
                    "type": "string"
                  }
                },
                "required": ["appName", "email", "website"]
              }
            }
          },
          "required": true
        },
        "tags": ["x-admin"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getNewApiKeyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/calc-rarity": {
      "post": {
        "summary": "Trigger calculation of the give collection tokens rarity",
        "operationId": "postAdminCalcrarity",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model362" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/create-rate-limit-rule": {
      "post": {
        "summary": "Create rate limit",
        "operationId": "postAdminCreateratelimitrule",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model365" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/delete-rate-limit-rule": {
      "post": {
        "summary": "Delete the rate limit with the given ID",
        "operationId": "postAdminDeleteratelimitrule",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model366" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/fix-blocks": {
      "post": {
        "summary": "Trigger fixing any orphaned block.",
        "operationId": "postAdminFixblocks",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Model367" },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/fix-cache": {
      "post": {
        "summary": "Trigger fixing any cache inconsistencies for array of contracts.",
        "operationId": "postAdminFixcache",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model368" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/fix-orders": {
      "post": {
        "summary": "Trigger fixing any order inconsistencies.",
        "operationId": "postAdminFixorders",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model369" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/fix-token-cache": {
      "post": {
        "summary": "Trigger fixing any cache inconsistencies for specific token.",
        "operationId": "postAdminFixtokencache",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model370" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/flag-address": {
      "post": {
        "summary": "Update address flag status",
        "operationId": "postAdminFlagaddress",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model371" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/index-metadata": {
      "post": {
        "summary": "Trigger metadata indexing for a token's collection",
        "operationId": "postAdminIndexmetadata",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model372" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/pause-rabbit-queue": {
      "post": {
        "summary": "Pause rabbit queue",
        "operationId": "postAdminPauserabbitqueue",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model373" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/refresh-collection": {
      "post": {
        "summary": "Refresh a collection's orders and metadata",
        "operationId": "postAdminRefreshcollection",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model374" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/refresh-collection-flags": {
      "post": {
        "summary": "Refresh tokens flag status for the given collection",
        "operationId": "postAdminRefreshcollectionflags",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model375" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/refresh-token": {
      "post": {
        "summary": "Refresh a token's orders and metadata",
        "operationId": "postAdminRefreshtoken",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model376" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/resume-rabbit-queue": {
      "post": {
        "summary": "Resume rabbit queue",
        "operationId": "postAdminResumerabbitqueue",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model377" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/resync-floor-events": {
      "post": {
        "summary": "Trigger fixing any floor events inconsistencies for any particular collection.",
        "operationId": "postAdminResyncfloorevents",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model378" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/resync-nft-balances": {
      "post": {
        "summary": "Trigger the recalculation of nft balances for tokens transferred in any particular block range",
        "operationId": "postAdminResyncnftbalances",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Model367" },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/resync-sale-royalties": {
      "post": {
        "summary": "Trigger the recalculation of sale royalties for any particular block range.",
        "operationId": "postAdminResyncsaleroyalties",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model379" }
            }
          },
          "x-alternatives": [
            { "$ref": "#/x-alt-definitions/Model22" },
            { "$ref": "#/x-alt-definitions/Model24" },
            { "$ref": "#/x-alt-definitions/Model26" }
          ]
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/resync-source": {
      "post": {
        "summary": "Trigger re-syncing of specific source domain",
        "operationId": "postAdminResyncsource",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model380" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/retry-rabbit-queue": {
      "post": {
        "summary": "Retry all the messages within the given dead letter rabbit queue",
        "operationId": "postAdminRetryrabbitqueue",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model381" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/revalidate-order": {
      "post": {
        "summary": "Revalidate an existing order",
        "operationId": "postAdminRevalidateorder",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model382" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/routers": {
      "post": {
        "summary": "Add a new router contract",
        "operationId": "postAdminRouters",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model384" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/set-community": {
      "post": {
        "summary": "Set a community for a specific collection",
        "operationId": "postAdminSetcommunity",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model385" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/sync-daily-volumes": {
      "post": {
        "summary": "Trigger a re-sync of daily volume calculations, volumes should only be calculated when fill_events have been fully synced",
        "operationId": "postAdminSyncdailyvolumes",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model386" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/sync-events": {
      "post": {
        "summary": "Trigger syncing of events.",
        "operationId": "postAdminSyncevents",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model388" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/trigger-job": {
      "post": {
        "summary": "Trigger re-syncing of specific source domain",
        "operationId": "postAdminTriggerjob",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model389" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/update-api-key": {
      "post": {
        "summary": "Update the given api key",
        "operationId": "postAdminUpdateapikey",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model390" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/update-rate-limit-rule": {
      "post": {
        "summary": "Update the rate limit for the given ID",
        "operationId": "postAdminUpdateratelimitrule",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model391" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/update-source": {
      "post": {
        "summary": "Trigger re-syncing of specific source domain",
        "operationId": "postAdminUpdatesource",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model392" }
            }
          }
        },
        "tags": ["x-admin"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        }
      }
    },
    "/admin/api-keys/metrics": {
      "post": {
        "summary": "Get API usage metrics for the given API key",
        "operationId": "postAdminApikeysMetrics",
        "description": "Get API usage metrics for the given API key",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "keys": {
                    "description": "Array API keys",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 50,
                    "items": { "type": "string", "x-format": { "guid": true } },
                    "x-alternatives": [
                      {
                        "type": "array",
                        "description": "Array API keys",
                        "minItems": 1,
                        "maxItems": 50,
                        "items": {
                          "type": "string",
                          "x-format": { "guid": true }
                        },
                        "collectionFormat": "multi",
                        "name": "keys"
                      },
                      {
                        "type": "string",
                        "description": "Array API keys",
                        "x-format": { "guid": true }
                      }
                    ]
                  },
                  "granularity": {
                    "description": "Return results by either hourly/daily/monthly granularity.<br>Hourly will return time in format YYYY-MM-DDTHH:00:000Z<br>Daily will return time in format YYYY-MM-DDT00:00:000Z<br>Monthly will return time in format YYYY-MM-01T00:00:000Z<br>",
                    "type": "string",
                    "enum": ["hourly", "daily", "monthly"],
                    "default": "monthly"
                  },
                  "groupBy": {
                    "description": "1 - All calls per hour/day/month<br>2 - All calls per key per hour/day/month<br>3 - All calls per key per route per hour/day/month<br>4 - All calls per key per route per status code per hour/day/month<br>",
                    "type": "number",
                    "enum": [1, 2, 3, 4],
                    "default": 1
                  },
                  "startTime": {
                    "description": "Get metrics after a particular time (allowed format YYYY-MM-DD HH:00)<br>Hourly default to last 24 hours<br>Daily default to last 7 days<br>Monthly default to last 12 months",
                    "type": "string",
                    "format": "date"
                  },
                  "endTime": {
                    "description": "Get metrics before a particular time (allowed format YYYY-MM-DD HH:00)",
                    "type": "string",
                    "format": "date"
                  }
                },
                "required": ["keys"]
              }
            }
          },
          "required": true
        },
        "tags": ["x-admin"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/postApiKeyMetricsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attributes/v1": {
      "get": {
        "summary": "List of attributes",
        "operationId": "getAttributesV1",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collection/v1": {
      "get": {
        "summary": "Get detailed information about a single collection",
        "operationId": "getCollectionV1",
        "description": "Get detailed information about a single collection, including real-time stats.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular slug, e.g. `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collection/v2": {
      "get": {
        "summary": "Single Collection",
        "operationId": "getCollectionV2",
        "description": "Get detailed information about a single collection, including real-time stats.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection slug. Example: `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collection/v3": {
      "get": {
        "summary": "Single Collection",
        "operationId": "getCollectionV3",
        "description": "Get detailed information about a single collection, including real-time stats.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection slug. Example: `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/v1": {
      "get": {
        "summary": "List of collections",
        "operationId": "getCollectionsV1",
        "description": "Useful for getting multiple collections to show in a marketplace, or search for particular collections.",
        "parameters": [
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Search for collections that match a string, e.g. `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular slug, e.g. `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["1DayVolume", "allTimeVolume"]
            },
            "description": "defaults to **allTimeVolume**"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/v2": {
      "get": {
        "summary": "Get a filtered list of collections",
        "operationId": "getCollectionsV2",
        "description": "Useful for getting multiple collections to show in a marketplace, or search for particular collections.",
        "parameters": [
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Search for collections that match a string, e.g. `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular slug, e.g. `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1DayVolume",
                "7DayVolume",
                "30DayVolume",
                "allTimeVolume"
              ]
            },
            "description": "defaults to **allTimeVolume**"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/v3": {
      "get": {
        "summary": "Get a filtered list of collections",
        "operationId": "getCollectionsV3",
        "description": "Useful for getting multiple collections to show in a marketplace, or search for particular collections.",
        "parameters": [
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Search for collections that match a string, e.g. `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular slug, e.g. `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1DayVolume",
                "7DayVolume",
                "30DayVolume",
                "allTimeVolume"
              ]
            },
            "description": "defaults to **allTimeVolume**"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/v4": {
      "get": {
        "summary": "Collections",
        "operationId": "getCollectionsV4",
        "description": "Useful for getting multiple collections to show in a marketplace, or search for particular collections.",
        "parameters": [
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Search for collections that match a string. Example: `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection slug. Example: `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **allTimeVolume**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1DayVolume",
                "7DayVolume",
                "30DayVolume",
                "allTimeVolume"
              ]
            }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/v5": {
      "get": {
        "summary": "Collections",
        "operationId": "getCollectionsV5",
        "description": "Use this API to explore a collection’s metadata and statistics (sales, volume, etc).",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection slug. Example: `boredapeyachtclub`",
            "name": "slug",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Search for collections that match a string. Example: `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Maximum floor price of the collection",
            "name": "maxFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Minumum floor price of the collection",
            "name": "minFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, attributes will be included in the response. Must filter by `id` or `slug` to a particular collection.",
            "name": "includeAttributes",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, sales count (1 day, 7 day, 30 day, all time) will be included in the response. Must filter by `id` or `slug` to a particular collection.",
            "name": "includeSalesCount",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, mint data for the collection will be included in the response. defaults to **false**",
            "name": "includeMintStages",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, return the non flagged floor ask. Supported only when `normalizeRoyalties` is false. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. Options are `#DayVolume`, `createdAt`, or `floorAskPrice` defaults to **allTimeVolume**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1DayVolume",
                "7DayVolume",
                "30DayVolume",
                "allTimeVolume",
                "createdAt",
                "floorAskPrice"
              ]
            }
          },
          {
            "description": "Amount of items returned in response. Default and max limit is 20. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Input any ERC20 address to return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsV5Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/orders/v1": {
      "get": {
        "summary": "List of valid orders.",
        "operationId": "getOrdersV1",
        "description": "Access orders with various filters applied. If you need orders created by a single user, use the positions API instead.",
        "parameters": [
          { "name": "id", "in": "query", "schema": { "type": "string" } },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getOrdersV1Response" }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "summary": "Submit order batch",
        "operationId": "postOrdersV1",
        "parameters": [
          {
            "name": "x-admin-api-key",
            "in": "header",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model409" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "deprecated": true
      }
    },
    "/orders/v2": {
      "get": {
        "summary": "Submit order batch",
        "operationId": "getOrdersV2",
        "description": "Access orders with various filters applied. If you need orders created by a single user, use the positions API instead.",
        "parameters": [
          { "name": "id", "in": "query", "schema": { "type": "string" } },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getOrdersV2Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/owners/v1": {
      "get": {
        "summary": "Owners",
        "operationId": "getOwnersV1",
        "description": "Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute.",
        "parameters": [
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+:[0-9]+$|^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/owners/v1?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 500 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getOwnersV1Response" }
              }
            }
          }
        },
        "x-order": 6
      }
    },
    "/sales/v1": {
      "get": {
        "summary": "Historical sales",
        "operationId": "getSalesV1",
        "description": "Get recent sales for a contract or token.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getSalesV1Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/sales/v2": {
      "get": {
        "summary": "Historical sales",
        "operationId": "getSalesV2",
        "description": "Get recent sales for a contract or token.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getSalesV2Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/sales/v3": {
      "get": {
        "summary": "Historical sales",
        "operationId": "getSalesV3",
        "description": "Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Example: `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getSalesV3Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/sales/v4": {
      "get": {
        "summary": "Sales",
        "operationId": "getSalesV4",
        "description": "Get recent sales for a contract or token.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 20,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contract"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contract",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 20
            }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "If enabled, also include token metadata in the response.",
            "name": "includeTokenMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If enabled, include sales that have been deleted. In some cases the backfilling process deletes sales that are no longer relevant or have been reverted. defaults to **false**",
            "name": "includeDeleted",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/sales/v4?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Order the items are returned in the response.",
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["price", "time", "updated_at"]
            }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive). Relative to the orderBy time filters.",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive). Relative to the orderBy time filters.",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Amount of items returned in response. defaults to **100**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getSalesV4Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/stats/v1": {
      "get": {
        "summary": "Stats",
        "operationId": "getStatsV1",
        "description": "Get aggregate stats for a particular set (collection, attribute or single token)",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular attribute. Example: `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getStatsV1Response" }
              }
            }
          }
        },
        "x-order": 7,
        "deprecated": true
      }
    },
    "/tokens/v1": {
      "get": {
        "summary": "List of tokens",
        "operationId": "getTokensV1",
        "description": "This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Limit to tokens that are listed for sale",
            "name": "onSale",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["tokenId", "floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV1Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/v2": {
      "get": {
        "summary": "List of tokens, with basic details, optimized for speed",
        "operationId": "getTokensV2",
        "description": "This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute, e.g. `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV2Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/v3": {
      "get": {
        "summary": "List of tokens, with basic details, optimized for speed",
        "operationId": "getTokensV3",
        "description": "This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute, e.g. `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV3Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/v4": {
      "get": {
        "summary": "Tokens",
        "operationId": "getTokensV4",
        "description": "This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular token set. Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Example: `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, by default sorted by `floorAskPrice`. Not supported when filtering by `contract`. When filtering by `contract` the results are sorted by `tokenId` by default. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "tokenId", "rarity"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV4Response" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/v5": {
      "get": {
        "summary": "Tokens",
        "operationId": "getTokensV5",
        "description": "Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token by name. Example: `token #1`",
            "name": "tokenName",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular token set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/tokens/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/tokens/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `opensea.io` (Only listed tokens are returned when filtering by source)",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `www.apecoinmarketplace.com`. For a native marketplace, return all tokens listed on this marketplace, even if better prices are available on other marketplaces.",
            "name": "nativeSource",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get tokens with a min rarity rank (inclusive)",
            "name": "minRarityRank",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Get tokens with a max rarity rank (inclusive)",
            "name": "maxRarityRank",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Get tokens with a min floor ask price (inclusive)",
            "name": "minFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get tokens with a max floor ask price (inclusive)",
            "name": "maxFloorAskPrice",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Allowed only with collection and tokens filtering!\n-1 = All tokens (default)\n0 = Non flagged tokens\n1 = Flagged tokens",
            "name": "flagStatus",
            "in": "query",
            "schema": { "type": "number", "enum": [-1, 0, 1] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "tokenId", "rarity"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "currencies"
              },
              {
                "type": "string",
                "description": "Filter to tokens with a listing in a particular currency. `Example: currencies[0]: 0x0000000000000000000000000000000000000000`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "currencies",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, attributes will be returned in the response. defaults to **false**",
            "name": "includeAttributes",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, quantity filled and quantity remaining will be returned in the response. defaults to **false**",
            "name": "includeQuantity",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, dynamic pricing data will be returned in the response. defaults to **false**",
            "name": "includeDynamicPricing",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, a boolean indicating whether royalties were paid on a token's last sale will be returned in the response. defaults to **false**",
            "name": "includeRoyaltiesPaid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/getTokensV5Response" }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/transfers/v2": {
      "get": {
        "summary": "Historical token transfers",
        "operationId": "getTransfersV2",
        "description": "Get recent transfers for a contract or token.",
        "parameters": [
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original` or `https://api.reservoir.tools/transfers/v2?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attributes[Type]=Original&attributes[Type]=Sibling`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular transaction. Example: `0x04654cc4c81882ed4d20b958e0eeb107915d75730110cce65333221439de6afc`",
            "x-convert": { "case": "lower" },
            "name": "txHash",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "defaults to **20**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTransfersV2Response"
                }
              }
            }
          }
        },
        "x-order": 10
      }
    },
    "/collections/activity/v4": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsActivityV4",
        "description": "This API can be used to build a feed for a collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV4Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/activity/v5": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsActivityV5",
        "description": "This API can be used to build a feed for a collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Example: `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 50, otherwise max limit is 1,000. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV5Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collectionOrSlug}/v1": {
      "get": {
        "summary": "Single collection",
        "operationId": "getCollectionsCollectionorslugV1",
        "description": "Get detailed information about a single collection, including real-time stats.",
        "parameters": [
          {
            "name": "collectionOrSlug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionDeprecatedV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/events/asks/v2": {
      "get": {
        "summary": "Asks status changes",
        "operationId": "getEventsAsksV2",
        "description": "Get updates any time an asks status changes",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAsksEventsV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/events/bids/v1": {
      "get": {
        "summary": "Bid status changes",
        "operationId": "getEventsBidsV1",
        "description": "Get updates any time a bid status changes",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, bid criteria is included in the response. defaults to **false**",
            "name": "includeCriteria",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getBidEventsV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/events/bids/v2": {
      "get": {
        "summary": "Bid status changes",
        "operationId": "getEventsBidsV2",
        "description": "Get updates any time a bid status changes",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getBidEventsV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/events/orders/v1": {
      "get": {
        "summary": "Order status changes",
        "operationId": "getEventsOrdersV1",
        "description": "Get updates any time an order status changes",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrderEventsV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/bid/v2": {
      "get": {
        "summary": "Create bid (offer)",
        "operationId": "getExecuteBidV2",
        "description": "Generate a bid and submit it to multiple marketplaces",
        "parameters": [
          {
            "description": "Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Bid on a particular token set.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Bid on a particular attribute key. Example: `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Bid on a particular attribute value. Example: `Teddy (#33)`",
            "name": "attributeValue",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5`",
            "name": "quantity",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Amount bidder is willing to offer in wei. Example: `1000000000000000000`",
            "name": "weiPrice",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Exchange protocol used to create order. Example: `seaport` defaults to **seaport**",
            "name": "orderKind",
            "in": "query",
            "schema": { "type": "string", "enum": ["zeroex-v4", "seaport"] }
          },
          {
            "description": "Orderbook where order is placed. Example: `Reservoir` defaults to **reservoir**",
            "name": "orderbook",
            "in": "query",
            "schema": { "type": "string", "enum": ["reservoir", "opensea"] }
          },
          {
            "description": "Name of the platform that created the order. Example: `Chimpers Market`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, royalties will be automatically included. defaults to **true**",
            "name": "automatedRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              { "type": "string", "pattern": "^[0-9]+$" },
              { "type": "number" }
            ],
            "name": "fee",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "If true flagged tokens will be excluded defaults to **false**",
            "name": "excludeFlaggedTokens",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Wallet address of fee recipient. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "feeRecipient",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "name": "listingTime",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]{10}$" }
          },
          {
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "name": "expirationTime",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]{10}$" }
          },
          {
            "description": "Optional. Random string to make the order unique",
            "name": "salt",
            "in": "query",
            "schema": { "type": "string", "pattern": "^\\d+$" }
          },
          {
            "description": "Optional. Set a custom nonce",
            "name": "nonce",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Signature v component (only required after order has been signed)",
            "name": "v",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Signature r component (only required after order has been signed)",
            "x-convert": { "case": "lower" },
            "name": "r",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Signature s component (only required after order has been signed)",
            "x-convert": { "case": "lower" },
            "name": "s",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBidV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/buy/v2": {
      "get": {
        "summary": "Buy a token at the best price",
        "operationId": "getExecuteBuyV2",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5`",
            "x-constraint": { "sign": "positive" },
            "name": "quantity",
            "in": "query",
            "schema": { "type": "integer" }
          },
          {
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "taker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "If true, only quote will be returned. defaults to **false**",
            "name": "onlyQuote",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "x-convert": { "case": "lower" },
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` defaults to **0x0000000000000000000000000000000000000000**",
            "x-convert": { "case": "lower" },
            "name": "referrer",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Fee amount in BPS. Example: `100`. defaults to **0**",
            "name": "referrerFeeBps",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "If true, partial orders will be accepted. defaults to **false**",
            "name": "partial",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxPriorityFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "If true, balance check will be skipped. defaults to **false**",
            "name": "skipBalanceCheck",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/buy/v3": {
      "get": {
        "summary": "Buy a token at the best price",
        "operationId": "getExecuteBuyV3",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Quanity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5`",
            "x-constraint": { "sign": "positive" },
            "name": "quantity",
            "in": "query",
            "schema": { "type": "integer" }
          },
          {
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            }
          },
          {
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "taker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "If true, only the path will be returned. defaults to **false**",
            "name": "onlyPath",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, all fills will be executed through the router.",
            "name": "forceRouter",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "currency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "x-convert": { "case": "lower" },
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` defaults to **0x0000000000000000000000000000000000000000**",
            "x-convert": { "case": "lower" },
            "name": "referrer",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Fee amount in BPS. Example: `100`. defaults to **0**",
            "name": "referrerFeeBps",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "If true, partial orders will be accepted. defaults to **false**",
            "name": "partial",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxPriorityFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "If true, balance check will be skipped. defaults to **false**",
            "name": "skipBalanceCheck",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/cancel/v1": {
      "get": {
        "summary": "Cancel order",
        "operationId": "getExecuteCancelV1",
        "description": "Cancel an existing order on any marketplace",
        "parameters": [
          {
            "description": "Order Id. Example: `0x1544e82e6f2174f26233abcc35f3d478fa9c92926a91465430657987aea7d748`",
            "name": "id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Address of wallet cancelling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Optional. Set custom gas price",
            "name": "maxFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Optional. Set custom gas price",
            "name": "maxPriorityFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteCancelV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/cancel/v2": {
      "get": {
        "summary": "Cancel order",
        "operationId": "getExecuteCancelV2",
        "description": "Cancel an existing order on any marketplace",
        "parameters": [
          {
            "description": "Order Id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Optional. Set custom gas price",
            "name": "maxFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Optional. Set custom gas price",
            "name": "maxPriorityFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteCancelV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/list/v2": {
      "get": {
        "summary": "Create ask (listing)",
        "operationId": "getExecuteListV2",
        "description": "Generate a listing and submit it to multiple marketplaces",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Quanity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5`",
            "name": "quantity",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Amount seller is willing to sell for in wei. Example: `1000000000000000000`",
            "name": "weiPrice",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Exchange protocol used to create order. Example: `seaport` defaults to **seaport**",
            "name": "orderKind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["zeroex-v4", "seaport", "x2y2"]
            }
          },
          {
            "description": "Orderbook where order is placed. Example: `Reservoir` defaults to **reservoir**",
            "name": "orderbook",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["opensea", "reservoir", "x2y2"]
            }
          },
          {
            "description": "Name of the platform that created the order. Example: `Chimpers Market`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, royalties will be automatically included. defaults to **true**",
            "name": "automatedRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              { "type": "string", "pattern": "^[0-9]+$" },
              { "type": "number" },
              {
                "type": "array",
                "items": { "type": "string", "pattern": "^[0-9]+$" },
                "collectionFormat": "multi",
                "name": "fee"
              },
              {
                "type": "array",
                "description": "Fee amount in BPS. Example: `100`",
                "items": { "type": "number" },
                "collectionFormat": "multi",
                "name": "fee"
              }
            ],
            "name": "fee",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              {
                "type": "array",
                "description": "Wallet address of fee recipient. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "feeRecipient"
              }
            ],
            "name": "feeRecipient",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-alternatives": [
              { "type": "string", "pattern": "^[0-9]+$" },
              { "type": "number" }
            ],
            "name": "listingTime",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "name": "expirationTime",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]{10}$" }
          },
          {
            "description": "Optional. Random string to make the order unique",
            "name": "salt",
            "in": "query",
            "schema": { "type": "string", "pattern": "^\\d+$" }
          },
          {
            "description": "Optional. Set a custom nonce",
            "name": "nonce",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Signature v component (only required after order has been signed)",
            "name": "v",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Signature r component (only required after order has been signed)",
            "x-convert": { "case": "lower" },
            "name": "r",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          },
          {
            "description": "Signature s component (only required after order has been signed)",
            "x-convert": { "case": "lower" },
            "name": "s",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBidV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/sell/v3": {
      "get": {
        "summary": "Sell tokens (accept bids)",
        "operationId": "getExecuteSellV3",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "taker",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "x-convert": { "case": "lower" },
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "Wallet address of referrer. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00` defaults to **0x0000000000000000000000000000000000000000**",
            "x-convert": { "case": "lower" },
            "name": "referrer",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "If true, only the path will be returned. defaults to **false**",
            "name": "onlyPath",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          },
          {
            "description": "Optional. Set custom gas price.",
            "name": "maxPriorityFeePerGas",
            "in": "query",
            "schema": { "type": "string", "pattern": "^[0-9]+$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/liquidity/users/v1": {
      "get": {
        "summary": "User bid liquidity rankings",
        "operationId": "getLiquidityUsersV1",
        "description": "This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUsersLiquidityV1Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/liquidity/users/v2": {
      "get": {
        "summary": "User bid liquidity rankings",
        "operationId": "getLiquidityUsersV2",
        "description": "This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUsersLiquidityV1Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/orders/all/v1": {
      "get": {
        "summary": "Bulk historical orders",
        "operationId": "getOrdersAllV1",
        "description": "This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "x-alternatives": [
              { "type": "string" },
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "id"
              }
            ],
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Sell or buy side. defaults to **sell**",
            "name": "side",
            "in": "query",
            "schema": { "type": "string", "enum": ["sell", "buy"] }
          },
          {
            "description": "If true, metadata will be included in the response. defaults to **false**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data will be included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAllV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/orders/all/v2": {
      "get": {
        "summary": "Bulk historical orders",
        "operationId": "getOrdersAllV2",
        "description": "This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "x-alternatives": [
              { "type": "string" },
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "id"
              }
            ],
            "name": "id",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Sell or buy side. defaults to **sell**",
            "name": "side",
            "in": "query",
            "schema": { "type": "string", "enum": ["sell", "buy"] }
          },
          {
            "description": "If true, metadata will be included in the response. defaults to **false**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data will be included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAllV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/orders/asks/v1": {
      "get": {
        "summary": "Get a list of asks (listings), filtered by token, collection or maker",
        "operationId": "getOrdersAsksV1",
        "description": "This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "description": "Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "`active` = currently valid, `inactive` = temporarily invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string", "enum": ["active", "inactive"] }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["price", "createdAt"] }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 },
            "description": "defaults to **50**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAsksV1Response"
                }
              }
            }
          }
        },
        "x-order": 41,
        "deprecated": true
      }
    },
    "/orders/asks/v2": {
      "get": {
        "summary": "Asks (listings)",
        "operationId": "getOrdersAsksV2",
        "description": "Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "active = currently valid, inactive = temporarily invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "When true, private orders are included in the response. defaults to **false**",
            "name": "includePrivate",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAsksV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/orders/asks/v3": {
      "get": {
        "summary": "Asks (listings)",
        "operationId": "getOrdersAsksV3",
        "description": "Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "x-alternatives": [
              { "type": "string" },
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              }
            ],
            "name": "ids",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "active = currently valid\ninactive = temporarily invalid\nexpired, cancelled, filled = permanently invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "source"
              },
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "source",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, private orders are included in the response. defaults to **false**",
            "name": "includePrivate",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **false**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, Sorting by price allowed only when filtering by token defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["createdAt", "price"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAsksV3Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/asks/v4": {
      "get": {
        "summary": "Asks (listings)",
        "operationId": "getOrdersAsksV4",
        "description": "Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.\n\n Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 80
            }
          },
          {
            "description": "activeª^º = currently valid\ninactiveª^ = temporarily invalid\nexpiredª^, canceledª^, filledª^ = permanently invalid\nanyªº = any status\nª when an `id` is passed\n^ when a `maker` is passed\nº when a `contract` is passed",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Only active listed will be returned. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, private orders are included in the response. defaults to **false**",
            "name": "includePrivate",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, dynamic pricing data will be returned in the response. defaults to **false**",
            "name": "includeDynamicPricing",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to **false**",
            "name": "excludeEOA",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, Sorting by price allowed only when filtering by token defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "price", "updatedAt"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersAsksV4Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/bids/v1": {
      "get": {
        "summary": "Get a list of bids (offers), filtered by token, collection or maker",
        "operationId": "getOrdersBidsV1",
        "description": "This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "description": "Filter to a token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user, e.g. `0x4d04eb67a2d1e01c71fad0366e0c200207a75487`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "`active` = currently valid, `inactive` = temporarily invalid, `expired` = permanently invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["active", "inactive", "expired"]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["price", "createdAt"] }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 },
            "description": "defaults to **50**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV1Response"
                }
              }
            }
          }
        },
        "x-order": 42,
        "deprecated": true
      }
    },
    "/orders/bids/v2": {
      "get": {
        "summary": "Bids (offers)",
        "operationId": "getOrdersBidsV2",
        "description": "Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "active = currently valid, inactive = temporarily invalid, expired = permanently invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/orders/bids/v3": {
      "get": {
        "summary": "Bids (offers)",
        "operationId": "getOrdersBidsV3",
        "description": "Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "x-alternatives": [
              { "type": "string" },
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              }
            ],
            "name": "ids",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "active = currently valid, inactive = temporarily invalid, expired = permanently invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **false**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, Sorting by price allowed only when filtering by token defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["createdAt", "price"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV3Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/bids/v4": {
      "get": {
        "summary": "Bids (offers)",
        "operationId": "getOrdersBidsV4",
        "description": "Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing",
        "parameters": [
          {
            "x-alternatives": [
              { "type": "string" },
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              }
            ],
            "name": "ids",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63` or `token:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:1`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute within a collection. Example: `attribute[Mouth]=Bored` (Collection must be passed as well when filtering by attribute)",
            "name": "attribute",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "active = currently valid\ninactive = temporarily invalid\nexpired, cancelled, filled = permanently invalid\n\nAvailable when filtering by maker, otherwise only valid orders will be returned",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **false**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response, Sorting by price allowed only when filtering by token defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["createdAt", "price"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV4Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/bids/v5": {
      "get": {
        "summary": "Bids (offers)",
        "operationId": "getOrdersBidsV5",
        "description": "Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.\n\n There are a different kind of bids than can be returned:\n\n- Inputting a 'contract' will return token and attribute bids.\n\n- Inputting a 'collection-id' will return collection wide bids./n/n Please mark `excludeEOA` as `true` to exclude Blur orders.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract.",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular user. Must set `source=blur.io` to reveal maker's blur bids. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "maker",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set. Example: `8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65`",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection bids with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Note: Our docs do not support this parameter correctly. To test, you can use the following URL in your browser. Example: `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original` or `https://api.reservoir.tools/orders/bids/v5?collection=0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63&attribute[Type]=Original&attribute[Type]=Sibling`(Collection must be passed as well when filtering by attribute)",
            "name": "attribute",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "maxItems": 80,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "contracts"
              },
              {
                "type": "string",
                "description": "Filter to an array of contracts. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "contracts",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 80
            }
          },
          {
            "description": "activeª^º = currently valid\ninactiveª^ = temporarily invalid\nexpiredª^, canceledª^, filledª^ = permanently invalid\nanyªº = any status\nª when an `id` is passed\n^ when a `maker` is passed\nº when a `contract` is passed",
            "name": "status",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a source by domain. Only active listed will be returned. Must set `rawData=true` to reveal individual bids when `source=blur.io`. Example: `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
            }
          },
          {
            "description": "If true, results will filter only Reservoir orders.",
            "name": "native",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **false**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, raw data is included in the response. Set `source=blur.io` and make this `true` to reveal individual blur bids. defaults to **false**",
            "name": "includeRawData",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, the depth of each order is included in the response. defaults to **false**",
            "name": "includeDepth",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. defaults to **false**",
            "name": "excludeEOA",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **createdAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["createdAt", "price", "updatedAt"]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getOrdersBidsV5Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/orders/executed/v1": {
      "get": {
        "summary": "Order status",
        "operationId": "getOrdersExecutedV1",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string" },
                "collectionFormat": "multi",
                "name": "ids"
              },
              { "type": "string" }
            ],
            "name": "ids",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 5,
        "deprecated": true
      }
    },
    "/redirect/logo/v1": {
      "get": {
        "summary": "Redirect response to the given source logo",
        "operationId": "getRedirectLogoV1",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53,
        "deprecated": true
      }
    },
    "/redirect/token/v1": {
      "get": {
        "summary": "Redirect response to the given source token page",
        "operationId": "getRedirectTokenV1",
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Redirect to the given token page, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "x-order": 53,
        "deprecated": true
      }
    },
    "/sales/bulk/v1": {
      "get": {
        "summary": "Bulk historical sales",
        "operationId": "getSalesBulkV1",
        "description": "Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint",
        "parameters": [
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Amount of items returned in response. defaults to **100**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getSalesBulkV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/search/collections/v1": {
      "get": {
        "summary": "Search collections",
        "operationId": "getSearchCollectionsV1",
        "parameters": [
          {
            "description": "Lightweight search for collections that match a string. Example: `bored`",
            "x-convert": { "case": "lower" },
            "name": "name",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular collection set",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getSearchCollectionsV1Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/sync/asks/v1": {
      "get": {
        "summary": "Sync Asks (listings)",
        "operationId": "getSyncAsksV1",
        "description": "This API is optimized for bulk access to asks (listings) for syncing a remote database. Thus it offers minimal filters/metadata.",
        "parameters": [
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/syncOrdersAsksV1Response"
                }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/tokens/details/v2": {
      "get": {
        "summary": "Get one or more tokens with full details",
        "operationId": "getTokensDetailsV2",
        "description": "Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute, e.g. `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073`",
            "x-convert": { "case": "lower" },
            "name": "source",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensDetailsV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/details/v3": {
      "get": {
        "summary": "Get one or more tokens with full details",
        "operationId": "getTokensDetailsV3",
        "description": "Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Filter to one or more tokens, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular set, e.g. `contract:0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute, e.g. `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular source, e.g. `0x5b3256965e7c3cf26e11fcaf296dfc8807c01073`",
            "x-convert": { "case": "lower" },
            "name": "source",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 },
            "description": "defaults to **20**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensDetailsV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/details/v4": {
      "get": {
        "summary": "Tokens (detailed response)",
        "operationId": "getTokensDetailsV4",
        "description": "Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "Filter to a particular token set. `Example: token:0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270:129000685`",
            "name": "tokenSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute. Example: `attributes[Type]=Original`",
            "name": "attributes",
            "in": "query",
            "x-type": "object",
            "schema": { "type": "string" }
          },
          {
            "description": "Domain of the order source. Example `opensea.io`",
            "name": "source",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["floorAskPrice", "tokenId"] }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 50 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensDetailsV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/users/activity/v2": {
      "get": {
        "summary": "Users activity",
        "operationId": "getUsersActivityV2",
        "description": "This API can be used to build a feed for a user",
        "parameters": [
          {
            "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV2Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/activity/v3": {
      "get": {
        "summary": "Users activity",
        "operationId": "getUsersActivityV3",
        "description": "This API can be used to build a feed for a user",
        "parameters": [
          {
            "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV3Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/activity/v4": {
      "get": {
        "summary": "Users activity",
        "operationId": "getUsersActivityV4",
        "description": "This API can be used to build a feed for a user",
        "parameters": [
          {
            "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              { "type": "string", "x-convert": { "case": "lower" } },
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              }
            ],
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV4Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/activity/v5": {
      "get": {
        "summary": "Users activity",
        "operationId": "getUsersActivityV5",
        "description": "This API can be used to build a feed for a user",
        "parameters": [
          {
            "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "minItems": 1,
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "users"
              },
              {
                "type": "string",
                "description": "Array of users addresses. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "users",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              },
              { "type": "string", "x-convert": { "case": "lower" } }
            ],
            "name": "collection",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "string", "x-convert": { "case": "lower" } }
            }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV5Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collection}/attributes/v1": {
      "get": {
        "summary": "Get detailed aggregate about attributes in a collection, e.g. trait floors",
        "operationId": "getCollectionsCollectionAttributesV1",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 200 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionAttributesV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/{collection}/activity/v3": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsCollectionActivityV3",
        "description": "This API can be used to build a feed for a collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV3Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collection}/activity/v1": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsCollectionActivityV1",
        "description": "This API can be used to build a feed for a collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV2Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collection}/activity/v2": {
      "get": {
        "summary": "Collection activity",
        "operationId": "getCollectionsCollectionActivityV2",
        "description": "This API can be used to build a feed for a collection",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Amount of items returned in response. If `includeMetadata=true` max limit is 20, otherwise max limit is 1,000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV2Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/collections/{collection}/top-bids/v1": {
      "get": {
        "summary": "Bid Distribution",
        "operationId": "getCollectionsCollectionTopbidsV1",
        "description": "When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for.",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionTopBidsV1Response"
                }
              }
            }
          }
        },
        "x-order": 5,
        "deprecated": true
      }
    },
    "/events/collections/floor-ask/v1": {
      "get": {
        "summary": "Collection floor changes",
        "operationId": "getEventsCollectionsFlooraskV1",
        "description": "Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was cancelled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will exclude floor asks on flagged tokens. (only supported when `normalizeRoyalties` is false) defaults to **false**",
            "name": "excludeFlaggedTokens",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsFloorAskV1Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/collections/top-bid/v1": {
      "get": {
        "summary": "Collection top bid changes",
        "operationId": "getEventsCollectionsTopbidV1",
        "description": "Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **50**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionsTopbidV1Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/tokens/floor-ask/v2": {
      "get": {
        "summary": "Token price changes",
        "operationId": "getEventsTokensFlooraskV2",
        "description": "Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was cancelled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 },
            "description": "defaults to **50**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensFloorAskV2Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/events/tokens/floor-ask/v3": {
      "get": {
        "summary": "Token price changes",
        "operationId": "getEventsTokensFlooraskV3",
        "description": "Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.\n\nThere are multiple event types, which describe what caused the change in price:\n\n- `new-order` > new listing at a lower price\n\n- `expiry` > the previous best listing expired\n\n- `sale` > the previous best listing was filled\n\n- `cancel` > the previous best listing was cancelled\n\n- `balance-change` > the best listing was invalidated due to no longer owning the NFT\n\n- `approval-change` > the best listing was invalidated due to revoked approval\n\n- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)\n\n- `reprice` > price update for dynamic orders (e.g. dutch auctions)\n\n- `bootstrap` > initial loading of data, so that all tokens have a price associated\n\nSome considerations to keep in mind\n\n- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.\n\n- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular token, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Get events after a particular unix timestamp (inclusive)",
            "name": "startTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "description": "Get events before a particular unix timestamp (inclusive)",
            "name": "endTimestamp",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 1000 },
            "description": "defaults to **50**"
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokensFloorAskV3Response"
                }
              }
            }
          }
        },
        "x-order": 4
      }
    },
    "/oracle/collections/floor-ask/v4": {
      "get": {
        "summary": "Collection floor",
        "operationId": "getOracleCollectionsFlooraskV4",
        "description": "Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "name": "eip3668Calldata",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "If true, will use the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionFloorAskOracleV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/oracle/collections/floor-ask/v5": {
      "get": {
        "summary": "Collection floor",
        "operationId": "getOracleCollectionsFlooraskV5",
        "description": "Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "name": "eip3668Calldata",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "If true, will use the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionFloorAskOracleV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/oracle/collections/top-bid/v2": {
      "get": {
        "summary": "Collection top bid oracle",
        "operationId": "getOracleCollectionsTopbidV2",
        "description": "Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["spot", "twap", "lower", "upper"]
            },
            "description": "defaults to **spot**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "currency",
            "in": "query",
            "schema": { "type": "string" },
            "description": "defaults to **0x0000000000000000000000000000000000000000**"
          },
          {
            "x-constraint": { "greater": 0 },
            "name": "twapSeconds",
            "in": "query",
            "schema": { "type": "number" },
            "description": "defaults to **86400**"
          },
          {
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionTopBidOracleV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/oracle/tokens/status/v2": {
      "get": {
        "summary": "Token status oracle",
        "operationId": "getOracleTokensStatusV2",
        "description": "Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.",
        "parameters": [
          {
            "x-alternatives": [
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
            ],
            "name": "tokens",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
              },
              "minItems": 1
            }
          },
          {
            "name": "signer",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "0x32da57e736e05f75aa4fae2e9be60fd904492726",
                "0xaeb1d03929bf87f69888f381e73fbf75753d75af"
              ]
            },
            "description": "defaults to **0xaeb1d03929bf87f69888f381e73fbf75753d75af**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenStatusOracleV2Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/{token}/activity/v3": {
      "get": {
        "summary": "Token activity",
        "operationId": "getTokensTokenActivityV3",
        "description": "This API can be used to build a feed for a token",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV4Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/tokens/{token}/activity/v1": {
      "get": {
        "summary": "Token activity",
        "operationId": "getTokensTokenActivityV1",
        "description": "This API can be used to build a feed for a token",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV2Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/tokens/{token}/activity/v2": {
      "get": {
        "summary": "Token activity",
        "operationId": "getTokensTokenActivityV2",
        "description": "This API can be used to build a feed for a token",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionActivityV2Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/tokens/{token}/activity/v4": {
      "get": {
        "summary": "Token activity",
        "operationId": "getTokensTokenActivityV4",
        "description": "This API can be used to build a feed for a token",
        "parameters": [
          {
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "x-convert": { "case": "lower" },
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response, eventTimestamp = The blockchain event time, createdAt - The time in which event was recorded defaults to **eventTimestamp**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["eventTimestamp", "createdAt"]
            }
          },
          {
            "description": "If true, metadata is included in the response. defaults to **true**",
            "name": "includeMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getTokenActivityV4Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/{user}/tokens/v6": {
      "get": {
        "summary": "User Tokens",
        "operationId": "getUsersUserTokensV6",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response. defaults to **acquiredAt**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["acquiredAt", "lastAppraisalValue"]
            }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 200 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, dynamic pricing data will be returned in the response. defaults to **false**",
            "name": "includeDynamicPricing",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will return the collection non flagged floor ask. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV6Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/users/{user}/tokens/v4": {
      "get": {
        "summary": "User Tokens",
        "operationId": "getUsersUserTokensV4",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Order the items are returned in the response.",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["acquiredAt"] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV4Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/users/{user}/tokens/v2": {
      "get": {
        "summary": "User tokens",
        "operationId": "getUsersUserTokensV2",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Order the items are returned in the response.",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["acquiredAt"] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV2Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/users/{user}/positions/v1": {
      "get": {
        "summary": "Get a summary of a users bids and asks",
        "operationId": "getUsersUserPositionsV1",
        "description": "Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made).",
        "parameters": [
          {
            "description": "Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "side",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["buy", "sell"] }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "status",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "enum": ["valid", "invalid"] }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserPositionsV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/users/{user}/collections/v2": {
      "get": {
        "summary": "User collections",
        "operationId": "getUsersUserCollectionsV2",
        "description": "Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, number of tokens with bids will be returned in the response. defaults to **false**",
            "name": "includeLiquidCount",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "Order the items are returned in the response. Defaults to allTimeVolume defaults to **allTimeVolume**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "allTimeVolume",
                "1DayVolume",
                "7DayVolume",
                "30DayVolume"
              ]
            }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserCollectionsV2Response"
                }
              }
            }
          }
        },
        "x-order": 3
      }
    },
    "/users/{user}/activity/v1": {
      "get": {
        "summary": "User activity",
        "operationId": "getUsersUserActivityV1",
        "description": "This API can be used to build a feed for a user",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "number" }
          },
          {
            "x-alternatives": [
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sale",
                    "ask",
                    "transfer",
                    "mint",
                    "bid",
                    "bid_cancel",
                    "ask_cancel"
                  ],
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "types"
              },
              {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "types",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sale",
                  "ask",
                  "transfer",
                  "mint",
                  "bid",
                  "bid_cancel",
                  "ask_cancel"
                ],
                "x-convert": { "case": "lower" }
              }
            }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserActivityV1Response"
                }
              }
            }
          }
        },
        "x-order": 1
      }
    },
    "/users/{user}/collections/v1": {
      "get": {
        "summary": "Get aggregate stats for a user, grouped by collection",
        "operationId": "getUsersUserCollectionsV1",
        "description": "Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.",
        "parameters": [
          {
            "description": "Wallet to see results for e.g. `0xf296178d553c8ec21a2fbd2c5dda8ca9ac905a00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserCollectionsV1Response"
                }
              }
            }
          }
        },
        "x-order": 31,
        "deprecated": true
      }
    },
    "/users/{user}/tokens/v1": {
      "get": {
        "summary": "User tokens",
        "operationId": "getUsersUserTokensV1",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "name": "hasOffer",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["topBuyValue"] }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/users/{user}/tokens/v3": {
      "get": {
        "summary": "User Tokens",
        "operationId": "getUsersUserTokensV3",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Order the items are returned in the response.",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["acquiredAt"] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV3Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/users/{user}/tokens/v5": {
      "get": {
        "summary": "User Tokens",
        "operationId": "getUsersUserTokensV5",
        "description": "Get tokens held by a user, along with ownership information such as associated orders and date acquired.",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Filter to a particular community, e.g. `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contract, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "contract",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
            "x-alternatives": [
              {
                "type": "array",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "maxItems": 50,
                "items": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                  "x-convert": { "case": "lower" }
                },
                "collectionFormat": "multi",
                "name": "tokens"
              },
              {
                "type": "string",
                "description": "Array of tokens. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              }
            ],
            "name": "tokens",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
                "x-convert": { "case": "lower" }
              },
              "maxItems": 50
            }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Order the items are returned in the response.",
            "name": "sortBy",
            "in": "query",
            "schema": { "type": "string", "enum": ["acquiredAt"] }
          },
          {
            "description": "Order the items are returned in the response. defaults to **desc**",
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTokensV5Response"
                }
              }
            }
          }
        },
        "x-order": 9
      }
    },
    "/collections/{collection}/attributes/explore/v4": {
      "get": {
        "summary": "Explore attributes",
        "operationId": "getCollectionsCollectionAttributesExploreV4",
        "description": "Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAsk` by default. ",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular token-id. Example: `1`",
            "name": "tokenId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, range traits will be excluded from the response. defaults to **false**",
            "name": "excludeRangeTraits",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, number traits will be excluded from the response. defaults to **false**",
            "name": "excludeNumberTraits",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filter to a particular attribute key. Example: `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Max number of items returned in the response. defaults to **1**",
            "name": "maxFloorAskPrices",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Max number of items returned in the response. defaults to **0**",
            "name": "maxLastSells",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 20 }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
            }
          },
          {
            "description": "Amount of items returned in response. Default limit is 20. Max limit is 5000. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 5000 }
          }
        ],
        "tags": ["x-deprecated", "Attributes"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesExploreV4Response"
                }
              }
            }
          }
        },
        "x-order": 15
      }
    },
    "/collections/{collection}/attributes/explore/v2": {
      "get": {
        "summary": "Explore attributes",
        "operationId": "getCollectionsCollectionAttributesExploreV2",
        "description": "Get detailed aggregate about attributes in a collection, attribute floors",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute key. Example: `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Max number of items returned in the response. defaults to **1**",
            "name": "maxFloorAskPrices",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Max number of items returned in the response. defaults to **0**",
            "name": "maxLastSells",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 5000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesExploreV2Response"
                }
              }
            }
          }
        },
        "x-order": 15
      }
    },
    "/collections/{collection}/attributes/all/v2": {
      "get": {
        "summary": "All attributes",
        "operationId": "getCollectionsCollectionAttributesAllV2",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesAllV2Response"
                }
              }
            }
          }
        },
        "x-order": 2
      }
    },
    "/collections/{collection}/attributes/all/v1": {
      "get": {
        "summary": "Get all attributes in a collection",
        "operationId": "getCollectionsCollectionAttributesAllV1",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/{collection}/attributes/all/v3": {
      "get": {
        "summary": "All attributes",
        "operationId": "getCollectionsCollectionAttributesAllV3",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesAllV3Response"
                }
              }
            }
          }
        },
        "x-order": 2
      }
    },
    "/collections/{collection}/attributes/static/v1": {
      "get": {
        "summary": "All attributes + token ids",
        "operationId": "getCollectionsCollectionAttributesStaticV1",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesStaticV1Response"
                }
              }
            }
          }
        },
        "x-order": 2
      }
    },
    "/collections/{collection}/attributes/explore/v1": {
      "get": {
        "summary": "Get detailed aggregate about attributes in a collection, e.g. trait floors",
        "operationId": "getCollectionsCollectionAttributesExploreV1",
        "parameters": [
          {
            "description": "Filter to a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular attribute key, e.g. `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            },
            "description": "defaults to **floorAskPrice**"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 },
            "description": "defaults to **0**"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 5000 },
            "description": "defaults to **20**"
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getCollectionAttributesV1Response"
                }
              }
            }
          }
        },
        "x-order": 15,
        "deprecated": true
      }
    },
    "/collections/{collection}/attributes/explore/v3": {
      "get": {
        "summary": "Explore attributes",
        "operationId": "getCollectionsCollectionAttributesExploreV3",
        "description": "Get detailed aggregate about attributes in a collection, attribute floors",
        "parameters": [
          {
            "description": "Filter to a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" },
            "name": "collection",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "description": "If true, top bid will be returned in the response. defaults to **false**",
            "name": "includeTopBid",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Filter to a particular attribute key. Example: `Composition`",
            "name": "attributeKey",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Max number of items returned in the response. defaults to **1**",
            "name": "maxFloorAskPrices",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          },
          {
            "description": "Max number of items returned in the response. defaults to **0**",
            "name": "maxLastSells",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 20 }
          },
          {
            "description": "Order the items are returned in the response. defaults to **floorAskPrice**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["floorAskPrice", "topBidValue"]
            }
          },
          {
            "description": "Use offset to request the next batch of items. defaults to **0**",
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "maximum": 10000 }
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 5000 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getAttributesExploreV3Response"
                }
              }
            }
          }
        },
        "x-order": 15,
        "deprecated": true
      }
    },
    "/orders/users/{user}/top-bids/v2": {
      "get": {
        "summary": "User Top Bids",
        "operationId": "getOrdersUsersUserTopbidsV2",
        "description": "Return the top bids for the given user tokens",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              { "type": "string", "x-convert": { "case": "lower" } },
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              }
            ],
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, urls will only be returned for optimized sources that support royalties. defaults to **false**",
            "name": "optimizeCheckoutURL",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **true**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will return the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order of the items are returned in the response. defaults to **topBidValue**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topBidValue",
                "dateCreated",
                "orderExpiry",
                "floorDifferencePercentage"
              ]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTopBidsV2Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/orders/users/{user}/top-bids/v1": {
      "get": {
        "summary": "User Top Bids",
        "operationId": "getOrdersUsersUserTopbidsV1",
        "description": "Return the top bids for the given user tokens",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              { "type": "string", "x-convert": { "case": "lower" } },
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              }
            ],
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, urls will only be returned for optimized sources that support royalties. defaults to **false**",
            "name": "optimizeCheckoutURL",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order of the items are returned in the response. defaults to **topBidValue**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topBidValue",
                "dateCreated",
                "orderExpiry",
                "floorDifferencePercentage"
              ]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 20 }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTopBidsV1Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/orders/users/{user}/top-bids/v3": {
      "get": {
        "summary": "User Top Bids",
        "operationId": "getOrdersUsersUserTopbidsV3",
        "description": "Return the top bids for the given user tokens",
        "parameters": [
          {
            "description": "Filter to a particular user. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "x-convert": { "case": "lower" },
            "name": "user",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          },
          {
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              { "type": "string", "x-convert": { "case": "lower" } },
              {
                "type": "array",
                "items": { "type": "string", "x-convert": { "case": "lower" } },
                "collectionFormat": "multi",
                "name": "collection"
              }
            ],
            "name": "collection",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular contracts set.",
            "x-convert": { "case": "lower" },
            "name": "contractsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular community. Example: `artblocks`",
            "x-convert": { "case": "lower" },
            "name": "community",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Filter to a particular collection set.",
            "x-convert": { "case": "lower" },
            "name": "collectionsSetId",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "If true, urls will only be returned for optimized sources that support royalties. defaults to **false**",
            "name": "optimizeCheckoutURL",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, criteria metadata is included in the response. defaults to **true**",
            "name": "includeCriteriaMetadata",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, prices will include missing royalties to be added on-top. defaults to **false**",
            "name": "normalizeRoyalties",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "If true, will return the collection non flagged floor ask events. defaults to **false**",
            "name": "useNonFlaggedFloorAsk",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "description": "Use continuation token to request next offset of items.",
            "name": "continuation",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "description": "Order of the items are returned in the response. defaults to **topBidValue**",
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topBidValue",
                "dateCreated",
                "orderExpiry",
                "floorDifferencePercentage"
              ]
            }
          },
          {
            "x-convert": { "case": "lower" },
            "name": "sortDirection",
            "in": "query",
            "schema": { "type": "string", "enum": ["asc", "desc"] },
            "description": "defaults to **desc**"
          },
          {
            "description": "Amount of items returned in response. defaults to **20**",
            "name": "limit",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1, "maximum": 100 }
          },
          {
            "description": "Amount of tokens considered. defaults to **10000**",
            "name": "sampleSize",
            "in": "query",
            "schema": { "type": "integer", "minimum": 1000, "maximum": 100000 }
          },
          {
            "description": "Return result in given currency",
            "x-convert": { "case": "lower" },
            "name": "displayCurrency",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
          }
        ],
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getUserTopBidsV3Response"
                }
              }
            }
          }
        },
        "x-order": 7
      }
    },
    "/order/v2": {
      "post": {
        "summary": "Submit single order",
        "operationId": "postOrderV2",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "signature",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model398" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/postOrderV2Response" }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/order/v3": {
      "post": {
        "summary": "Submit signed order",
        "operationId": "postOrderV3",
        "parameters": [
          {
            "x-convert": { "case": "lower" },
            "name": "signature",
            "in": "query",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]+$" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model400" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/postOrderV2Response" }
              }
            }
          }
        },
        "x-order": 5
      }
    },
    "/seaport/offers": {
      "post": {
        "summary": "Submit multiple Seaport offers (compatible with OpenSea's API response)",
        "operationId": "postSeaportOffers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model411" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "default": {
            "description": "Successful",
            "content": { "*/*": { "schema": { "type": "string" } } }
          }
        },
        "deprecated": true
      }
    },
    "/token-sets/v1": {
      "post": {
        "summary": "Create Token Set",
        "operationId": "postTokensetsV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model412" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": { "schema": { "$ref": "#/components/schemas/Model239" } }
            }
          }
        },
        "deprecated": true
      }
    },
    "/collections/refresh/v1": {
      "post": {
        "summary": "Refresh Collection",
        "operationId": "postCollectionsRefreshV1",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model416" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/bid/v4": {
      "post": {
        "summary": "Create bid (offer)",
        "operationId": "postExecuteBidV4",
        "description": "Generate a bid and submit it to multiple marketplaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model420" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBidV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/buy/v4": {
      "post": {
        "summary": "Buy tokens",
        "operationId": "postExecuteBuyV4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model434" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "x-order": 10,
        "deprecated": true
      }
    },
    "/execute/buy/v5": {
      "post": {
        "summary": "Buy tokens",
        "operationId": "postExecuteBuyV5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model436" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "x-order": 10,
        "deprecated": true
      }
    },
    "/execute/buy/v6": {
      "post": {
        "summary": "Buy tokens",
        "operationId": "postExecuteBuyV6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model440" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV6Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/list/v3": {
      "post": {
        "summary": "Create ask (listing)",
        "operationId": "postExecuteListV3",
        "description": "Generate a listing and submit it to multiple marketplaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model471" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteListV3Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/list/v4": {
      "post": {
        "summary": "Create ask (listing)",
        "operationId": "postExecuteListV4",
        "description": "Generate a listing and submit it to multiple marketplaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model476" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteListV4Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/execute/sell/v4": {
      "post": {
        "summary": "Sell tokens (accept bids)",
        "operationId": "postExecuteSellV4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model487" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "x-order": 10,
        "deprecated": true
      }
    },
    "/execute/sell/v5": {
      "post": {
        "summary": "Sell tokens (accept bids)",
        "operationId": "postExecuteSellV5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model488" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV3Response"
                }
              }
            }
          }
        },
        "x-order": 10,
        "deprecated": true
      }
    },
    "/execute/sell/v6": {
      "post": {
        "summary": "Sell tokens (accept bids)",
        "operationId": "postExecuteSellV6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model491" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/getExecuteBuyV6Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/simulate-floor/v1": {
      "post": {
        "summary": "Simulate the floor ask of any token",
        "operationId": "postTokensSimulatefloorV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model504" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/tokens/simulate-top-bid/v1": {
      "post": {
        "summary": "Simulate the top bid of any token",
        "operationId": "postTokensSimulatetopbidV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Model505" }
            }
          }
        },
        "tags": ["x-deprecated"],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/putSetCollectionCommunityV1Response"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    }
  },
  "x-alt-definitions": {
    "data": {
      "type": "object",
      "properties": {
        "collectionId": { "type": "string" },
        "collectionName": { "type": "string" },
        "tokenName": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "metadata": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["token"] },
        "data": { "$ref": "#/x-alt-definitions/data" }
      }
    },
    "Model1": {
      "type": "object",
      "properties": {
        "collectionId": { "type": "string" },
        "collectionName": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "Model2": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["collection"] },
        "data": { "$ref": "#/x-alt-definitions/Model1" }
      }
    },
    "Model3": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "value": { "type": "string" }
      },
      "required": ["value"]
    },
    "attributes": {
      "type": "array",
      "items": { "$ref": "#/x-alt-definitions/Model3" }
    },
    "Model4": {
      "type": "object",
      "properties": {
        "collectionId": { "type": "string" },
        "collectionName": { "type": "string" },
        "attributes": { "$ref": "#/x-alt-definitions/attributes" },
        "image": { "type": "string" }
      }
    },
    "Model5": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["attribute"] },
        "data": { "$ref": "#/x-alt-definitions/Model4" }
      }
    },
    "token": {
      "type": "object",
      "properties": {
        "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
        "name": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "collection": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "name": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "Model6": {
      "type": "object",
      "properties": {
        "token": { "$ref": "#/x-alt-definitions/token" },
        "collection": { "$ref": "#/x-alt-definitions/collection" }
      }
    },
    "criteria": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["token"] },
        "data": { "$ref": "#/x-alt-definitions/Model6" }
      }
    },
    "Model7": {
      "type": "object",
      "properties": {
        "collection": { "$ref": "#/x-alt-definitions/collection" }
      }
    },
    "Model8": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["collection"] },
        "data": { "$ref": "#/x-alt-definitions/Model7" }
      }
    },
    "Model9": {
      "type": "object",
      "properties": {
        "collection": { "$ref": "#/x-alt-definitions/collection" },
        "attribute": { "$ref": "#/x-alt-definitions/Model3" }
      }
    },
    "Model10": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["attribute"] },
        "data": { "$ref": "#/x-alt-definitions/Model9" }
      }
    },
    "Model11": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["custom"] },
        "data": { "$ref": "#/x-alt-definitions/Model7" }
      }
    },
    "Model12": {
      "type": "object",
      "properties": {
        "collectionName": { "type": "string" },
        "tokenName": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "Model13": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["token"] },
        "data": { "$ref": "#/x-alt-definitions/Model12" }
      }
    },
    "Model14": {
      "type": "object",
      "properties": {
        "collectionName": { "type": "string" },
        "image": { "type": "string" }
      }
    },
    "Model15": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["collection"] },
        "data": { "$ref": "#/x-alt-definitions/Model14" }
      }
    },
    "Model16": {
      "type": "object",
      "properties": {
        "collectionName": { "type": "string" },
        "attributes": { "$ref": "#/x-alt-definitions/attributes" },
        "image": { "type": "string" }
      }
    },
    "Model17": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["attribute"] },
        "data": { "$ref": "#/x-alt-definitions/Model16" }
      }
    },
    "currency": {
      "type": "object",
      "properties": {
        "contract": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
        "name": { "type": "string" },
        "symbol": { "type": "string" },
        "decimals": { "type": "number" }
      }
    },
    "amount": {
      "type": "object",
      "description": "Amount with fees & royalties included.",
      "properties": {
        "raw": { "type": "string", "pattern": "^[0-9]+$" },
        "decimal": { "type": "number" },
        "usd": { "type": "number" },
        "native": { "type": "number" }
      }
    },
    "netAmount": {
      "type": "object",
      "description": "Amount with fees & royalties removed.",
      "properties": {
        "raw": { "type": "string", "pattern": "^[0-9]+$" },
        "decimal": { "type": "number" },
        "usd": { "type": "number" },
        "native": { "type": "number" }
      }
    },
    "start": {
      "type": "object",
      "properties": {
        "currency": { "$ref": "#/x-alt-definitions/currency" },
        "amount": { "$ref": "#/x-alt-definitions/amount" },
        "netAmount": { "$ref": "#/x-alt-definitions/netAmount" }
      }
    },
    "price": {
      "type": "object",
      "properties": {
        "start": { "$ref": "#/x-alt-definitions/start" },
        "end": { "$ref": "#/x-alt-definitions/start" }
      }
    },
    "time": {
      "type": "object",
      "properties": {
        "start": { "type": "number" },
        "end": { "type": "number" }
      }
    },
    "Model18": {
      "type": "object",
      "properties": {
        "price": { "$ref": "#/x-alt-definitions/price" },
        "time": { "$ref": "#/x-alt-definitions/time" }
      }
    },
    "dynamicPricing": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["dutch"] },
        "data": { "$ref": "#/x-alt-definitions/Model18" }
      }
    },
    "prices": {
      "type": "array",
      "items": { "$ref": "#/x-alt-definitions/start" }
    },
    "Model19": {
      "type": "object",
      "properties": {
        "pool": { "type": "string" },
        "prices": { "$ref": "#/x-alt-definitions/prices" }
      }
    },
    "Model20": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["pool"] },
        "data": { "$ref": "#/x-alt-definitions/Model19" }
      }
    },
    "Model21": {
      "type": "object",
      "properties": {
        "fromBlock": { "type": "number" },
        "toBlock": { "type": "number" }
      },
      "required": ["fromBlock", "toBlock"]
    },
    "Model22": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["all"] },
        "data": { "$ref": "#/x-alt-definitions/Model21" }
      }
    },
    "Model23": {
      "type": "object",
      "properties": {
        "contract": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
        "fromTimestamp": { "type": "number" },
        "toTimestamp": { "type": "number" }
      },
      "required": ["contract", "fromTimestamp", "toTimestamp"]
    },
    "Model24": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["contract"] },
        "data": { "$ref": "#/x-alt-definitions/Model23" }
      }
    },
    "Model25": {
      "type": "object",
      "properties": {
        "txHash": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" }
      },
      "required": ["txHash"]
    },
    "Model26": {
      "type": "object",
      "properties": {
        "kind": { "type": "string", "enum": ["transaction"] },
        "data": { "$ref": "#/x-alt-definitions/Model25" }
      }
    },
    "events": { "type": "array", "items": { "type": "string" } },
    "syncDetails": {
      "type": "object",
      "properties": {
        "method": { "type": "string", "enum": ["events"] },
        "events": { "$ref": "#/x-alt-definitions/events" }
      }
    },
    "Model27": {
      "type": "object",
      "properties": {
        "method": { "type": "string", "enum": ["address"] },
        "address": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" }
      }
    },
    "fee": {
      "type": "array",
      "items": { "type": "string", "pattern": "^[0-9]+$" }
    },
    "Model28": {
      "type": "array",
      "description": "Fee amount in BPS. Example: `100`",
      "items": { "type": "number" }
    },
    "feeRecipient": {
      "type": "array",
      "description": "Wallet address of fee recipient. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
      "items": {
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]{40}$",
        "x-convert": { "case": "lower" }
      }
    }
  },
  "servers": [
    { "url": "https://api.reservoir.tools" },
    { "url": "https://api-goerli.reservoir.tools" },
    { "url": "https://api-optimism.reservoir.tools" },
    { "url": "https://api-polygon.reservoir.tools" },
    { "url": "https://api-mumbai.reservoir.tools" },
    { "url": "https://api-bsc.reservoir.tools" },
    { "url": "https://api-arbitrum.reservoir.tools" },
    { "url": "https://api-arbitrum-nova.reservoir.tools" },
    { "url": "https://api-sepolia.reservoir.tools" },
    { "url": "https://api-base.reservoir.tools" },
    { "url": "https://api-base-goerli.reservoir.tools" },
    { "url": "https://api-scroll-alpha.reservoir.tools" },
    { "url": "https://api-zora.reservoir.tools" },
    { "url": "https://api-zora-testnet.reservoir.tools" }
  ],
  "components": {
    "requestBodies": {
      "Model367": {
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Model367" }
          }
        }
      }
    },
    "securitySchemes": {
      "API_KEY": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "x-default": "demo-api-key"
      }
    },
    "schemas": {
      "fee": {
        "type": "object",
        "properties": {
          "bps": { "type": "number" },
          "percent": { "type": "number" }
        }
      },
      "Model1": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "imageUrl": { "type": "string" },
          "fee": { "$ref": "#/components/schemas/fee" },
          "feeBps": { "type": "number" },
          "orderbook": { "type": "string" },
          "orderKind": { "type": "string" },
          "listingEnabled": { "type": "boolean" }
        }
      },
      "marketplaces": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model1" }
      },
      "getMarketplacesv1Resp": {
        "type": "object",
        "properties": {
          "marketplaces": { "$ref": "#/components/schemas/marketplaces" }
        }
      },
      "Model2": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "count": { "type": "number" }
        },
        "required": ["value"]
      },
      "values": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model2" }
      },
      "Model3": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "kind": {
            "type": "string",
            "enum": ["string", "number", "date", "range"]
          },
          "values": { "$ref": "#/components/schemas/values" }
        },
        "required": ["key", "kind"]
      },
      "attributes": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model3" }
      },
      "getAttributesV1Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/attributes" }
        }
      },
      "metadata": { "type": "object" },
      "sampleImages": { "type": "array", "items": { "type": "string" } },
      "royalties": {
        "type": "object",
        "properties": {
          "recipient": { "type": "string" },
          "bps": { "type": "number" }
        }
      },
      "lastBuy": {
        "type": "object",
        "properties": {
          "value": { "type": "number" },
          "timestamp": { "type": "number" }
        }
      },
      "token": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "floorAsk": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "token": { "$ref": "#/components/schemas/token" }
        }
      },
      "topBid": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "value": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" }
        }
      },
      "rank": {
        "type": "object",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" },
          "allTime": { "type": "number" }
        }
      },
      "volumeChange": {
        "type": "object",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" }
        }
      },
      "collection": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/royalties" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "floorAsk": { "$ref": "#/components/schemas/floorAsk" },
          "topBid": { "$ref": "#/components/schemas/topBid" },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" },
          "floorSaleChange": { "$ref": "#/components/schemas/volumeChange" }
        }
      },
      "getCollectionV1Response": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/collection" }
        }
      },
      "Model4": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "kind": { "type": "string" },
          "count": { "type": "number" }
        }
      },
      "Model5": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model4" }
      },
      "Model6": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string", "description": "Open Sea slug" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/royalties" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "floorAsk": { "$ref": "#/components/schemas/floorAsk" },
          "topBid": { "$ref": "#/components/schemas/topBid" },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" },
          "floorSaleChange": { "$ref": "#/components/schemas/volumeChange" },
          "collectionBidSupported": { "type": "boolean" },
          "ownerCount": { "type": "number" },
          "attributes": { "$ref": "#/components/schemas/Model5" }
        }
      },
      "getCollectionV2Response": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model6" }
        }
      },
      "Model7": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "sourceDomain": { "type": "string" },
          "price": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "token": { "$ref": "#/components/schemas/token" }
        }
      },
      "Model8": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string", "description": "Open Sea slug" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/royalties" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "floorAsk": { "$ref": "#/components/schemas/Model7" },
          "topBid": { "$ref": "#/components/schemas/topBid" },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" },
          "floorSaleChange": { "$ref": "#/components/schemas/volumeChange" },
          "collectionBidSupported": { "type": "boolean" },
          "ownerCount": { "type": "number" },
          "attributes": { "$ref": "#/components/schemas/Model5" }
        }
      },
      "getCollectionV3Response": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model8" }
        }
      },
      "Model9": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/royalties" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" }
        }
      },
      "collections": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model9" }
      },
      "getCollectionsV1Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/collections" }
        }
      },
      "Model10": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "1dayVolume": { "type": "number" },
          "7dayVolume": { "type": "number" },
          "30dayVolume": { "type": "number" },
          "allTimeVolume": { "type": "number" },
          "allTimeRank": { "type": "number" }
        }
      },
      "Model11": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model10" }
      },
      "getCollectionsV2Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model11" }
        }
      },
      "Model12": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" }
        }
      },
      "Model13": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model12" }
      },
      "getCollectionsV3Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model13" }
        }
      },
      "Model14": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" },
          "floorSaleChange": { "$ref": "#/components/schemas/volumeChange" }
        }
      },
      "Model15": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model14" }
      },
      "getCollectionsV4Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "collections": { "$ref": "#/components/schemas/Model15" }
        }
      },
      "Model16": {
        "type": "object",
        "properties": {
          "recipient": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "bps": { "type": "number" }
        }
      },
      "breakdown": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model16" }
      },
      "Model17": {
        "type": "object",
        "properties": {
          "recipient": { "type": "string" },
          "breakdown": { "$ref": "#/components/schemas/breakdown" },
          "bps": { "type": "number" }
        }
      },
      "currency": {
        "type": "object",
        "properties": {
          "contract": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "name": { "type": "string" },
          "symbol": { "type": "string" },
          "decimals": { "type": "number" }
        }
      },
      "amount": {
        "type": "object",
        "description": "Amount with fees & royalties included.",
        "properties": {
          "raw": { "type": "string", "pattern": "^[0-9]+$" },
          "decimal": { "type": "number" },
          "usd": { "type": "number" },
          "native": { "type": "number" }
        }
      },
      "netAmount": {
        "type": "object",
        "description": "Amount with fees & royalties removed.",
        "properties": {
          "raw": { "type": "string", "pattern": "^[0-9]+$" },
          "decimal": { "type": "number" },
          "usd": { "type": "number" },
          "native": { "type": "number" }
        }
      },
      "price": {
        "type": "object",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model18": {
        "type": "object",
        "description": "Lowest Ask Price.",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model19": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "sourceDomain": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model18" }
        }
      },
      "Model20": {
        "type": "object",
        "description": "Highest current offer",
        "properties": {
          "id": { "type": "string" },
          "sourceDomain": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" }
        }
      },
      "Model21": {
        "type": "object",
        "description": "Current rank based from overall volume",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" },
          "allTime": { "type": "number" }
        }
      },
      "volume": {
        "type": "object",
        "description": "Total volume in given time period.",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" },
          "allTime": { "type": "number" }
        }
      },
      "Model22": {
        "type": "object",
        "description": "Total volume change X-days vs previous X-days. (e.g. 7day [days 1-7] vs 7day prior [days 8-14])",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" }
        }
      },
      "floorSale": {
        "type": "object",
        "description": "The floor sale from X-days ago.",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" }
        }
      },
      "floorSaleChange": {
        "type": "object",
        "description": "Floor sale change from X-days vs X-days ago. (e.g. 7day floor sale vs floor sale 14 days ago)",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" }
        }
      },
      "salesCount": {
        "type": "object",
        "description": "Number of sales of X-days period",
        "properties": {
          "1day": { "type": "number" },
          "7day": { "type": "number" },
          "30day": { "type": "number" },
          "allTime": { "type": "number" }
        }
      },
      "Model23": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Case sensitive" },
          "kind": {
            "type": "string",
            "description": "`string`, `number`, `date`, or `range`"
          },
          "count": { "type": "number" }
        }
      },
      "Model24": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model23" }
      },
      "Model25": {
        "type": "object",
        "properties": {
          "stage": { "type": "string" },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "kind": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "startTime": { "type": "number" },
          "endTime": { "type": "number" },
          "maxMintsPerWallet": { "type": "number" }
        },
        "required": ["stage", "kind", "price"]
      },
      "mintStages": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model25" }
      },
      "Model26": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Collection id" },
          "slug": { "type": "string", "description": "Open Sea slug" },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "openseaVerificationStatus": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": {
            "type": "string",
            "description": "Total tokens within the collection."
          },
          "onSaleCount": {
            "type": "string",
            "description": "Total tokens currently on sale."
          },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/Model17" },
          "allRoyalties": { "$ref": "#/components/schemas/metadata" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "floorAsk": { "$ref": "#/components/schemas/Model19" },
          "topBid": { "$ref": "#/components/schemas/Model20" },
          "rank": { "$ref": "#/components/schemas/Model21" },
          "volume": { "$ref": "#/components/schemas/volume" },
          "volumeChange": { "$ref": "#/components/schemas/Model22" },
          "floorSale": { "$ref": "#/components/schemas/floorSale" },
          "floorSaleChange": { "$ref": "#/components/schemas/floorSaleChange" },
          "salesCount": { "$ref": "#/components/schemas/salesCount" },
          "collectionBidSupported": {
            "type": "boolean",
            "description": "true or false"
          },
          "ownerCount": {
            "type": "number",
            "description": "Unique number of owners."
          },
          "attributes": { "$ref": "#/components/schemas/Model24" },
          "contractKind": {
            "type": "string",
            "description": "Returns `erc721`, `erc1155`, etc."
          },
          "mintedTimestamp": { "type": "number" },
          "mintStages": { "$ref": "#/components/schemas/mintStages" }
        }
      },
      "Model27": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model26" }
      },
      "getCollectionsV5Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "collections": { "$ref": "#/components/schemas/Model27" }
        }
      },
      "Model28": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Collection id" },
          "slug": { "type": "string", "description": "Open Sea slug" },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "openseaVerificationStatus": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": {
            "type": "string",
            "description": "Total tokens within the collection."
          },
          "onSaleCount": {
            "type": "string",
            "description": "Total tokens currently on sale."
          },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "creator": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/Model17" },
          "allRoyalties": { "$ref": "#/components/schemas/metadata" },
          "floorAsk": { "$ref": "#/components/schemas/Model19" },
          "topBid": { "$ref": "#/components/schemas/Model20" },
          "rank": { "$ref": "#/components/schemas/Model21" },
          "volume": { "$ref": "#/components/schemas/volume" },
          "volumeChange": { "$ref": "#/components/schemas/Model22" },
          "floorSale": { "$ref": "#/components/schemas/floorSale" },
          "floorSaleChange": { "$ref": "#/components/schemas/floorSaleChange" },
          "salesCount": { "$ref": "#/components/schemas/salesCount" },
          "collectionBidSupported": {
            "type": "boolean",
            "description": "true or false"
          },
          "ownerCount": {
            "type": "number",
            "description": "Unique number of owners."
          },
          "attributes": { "$ref": "#/components/schemas/Model24" },
          "contractKind": {
            "type": "string",
            "description": "Returns `erc721`, `erc1155`, etc."
          },
          "mintedTimestamp": { "type": "number" },
          "mintStages": { "$ref": "#/components/schemas/mintStages" }
        }
      },
      "Model29": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model28" }
      },
      "getCollectionsV6Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "collections": { "$ref": "#/components/schemas/Model29" }
        }
      },
      "Model30": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "orderId": { "type": "string" },
          "orderbook": { "type": "string" },
          "status": {
            "type": "string",
            "description": "Possible values: pending - Waiting to be submitted. posted - Successfully submitted to the marketplace. posted - Failed to be submitted to the marketplace (see statusReason for detail)."
          },
          "statusReason": { "type": "string" },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "updatedAt": {
            "type": "string",
            "description": "Time when updated in indexer"
          }
        },
        "required": [
          "id",
          "orderId",
          "orderbook",
          "status",
          "statusReason",
          "createdAt",
          "updatedAt"
        ]
      },
      "orders": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model30" }
      },
      "getCrossPostingOrdersV1Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/orders" },
          "continuation": { "type": "string", "pattern": "^[0-9]+$" }
        }
      },
      "Model31": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "recipient": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "bps": { "type": "number" }
        }
      },
      "feeBreakdown": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model31" }
      },
      "Model32": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "fillabilityStatus": { "type": "string" },
          "approvalStatus": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "sourceId": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/feeBreakdown" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "fillabilityStatus",
          "approvalStatus",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "price",
          "value",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model33": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model32" }
      },
      "getOrdersV1Response": {
        "type": "object",
        "properties": { "orders": { "$ref": "#/components/schemas/Model33" } }
      },
      "Model34": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "fillabilityStatus": { "type": "string" },
          "approvalStatus": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/feeBreakdown" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "fillabilityStatus",
          "approvalStatus",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "price",
          "value",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model35": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model34" }
      },
      "getOrdersV2Response": {
        "type": "object",
        "properties": { "orders": { "$ref": "#/components/schemas/Model35" } }
      },
      "ownership": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "totalBidValue": { "type": "number" }
        }
      },
      "Model36": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "ownership": { "$ref": "#/components/schemas/ownership" }
        }
      },
      "owners": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model36" }
      },
      "getOwnersV1Response": {
        "type": "object",
        "properties": { "owners": { "$ref": "#/components/schemas/owners" } }
      },
      "floorAskPrice": {
        "type": "object",
        "description": "Can return `null` if there is no Floor Ask",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "topBidValue": {
        "type": "object",
        "description": "Can return `null` if there are no bids",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model37": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAskPrice": { "$ref": "#/components/schemas/floorAskPrice" },
          "topBidValue": { "$ref": "#/components/schemas/topBidValue" },
          "totalBidValue": { "$ref": "#/components/schemas/topBidValue" }
        }
      },
      "Model38": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "ownership": { "$ref": "#/components/schemas/Model37" }
        }
      },
      "Model39": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model38" }
      },
      "getOwnersV2Response": {
        "type": "object",
        "properties": { "owners": { "$ref": "#/components/schemas/Model39" } }
      },
      "Model40": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "Model41": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model40" }
        }
      },
      "Model42": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model41" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "timestamp": { "type": "number" },
          "price": { "type": "number" }
        }
      },
      "sales": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model42" }
      },
      "getSalesV1Response": {
        "type": "object",
        "properties": { "sales": { "$ref": "#/components/schemas/sales" } }
      },
      "Model43": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model41" },
          "orderSide": { "type": "string", "enum": ["ask", "bid"] },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "timestamp": { "type": "number" },
          "price": { "type": "number" }
        }
      },
      "Model44": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model43" }
      },
      "getSalesV2Response": {
        "type": "object",
        "properties": { "sales": { "$ref": "#/components/schemas/Model44" } }
      },
      "Model45": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "saleId": { "type": "string" },
          "token": { "$ref": "#/components/schemas/Model41" },
          "orderSource": { "type": "string" },
          "orderSourceDomain": { "type": "string" },
          "orderSide": { "type": "string", "enum": ["ask", "bid"] },
          "orderKind": { "type": "string" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "fillSource": { "type": "string" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": { "type": "number" },
          "price": { "type": "number" },
          "currency": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "currencyPrice": { "type": "number" },
          "usdPrice": { "type": "number" },
          "washTradingScore": { "type": "number" }
        }
      },
      "Model46": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model45" }
      },
      "getSalesV3Response": {
        "type": "object",
        "properties": {
          "sales": { "$ref": "#/components/schemas/Model46" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model47": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "bps": { "type": "number" },
          "recipient": { "type": "string" }
        }
      },
      "Model48": {
        "type": "array",
        "description": "`kind` can be `marketplace` or `royalty`",
        "items": { "$ref": "#/components/schemas/Model47" }
      },
      "Model49": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Deprecated. Use `saleId` instead."
          },
          "saleId": {
            "type": "string",
            "description": "Unique identifier made from txn hash, price, etc."
          },
          "token": { "$ref": "#/components/schemas/Model41" },
          "orderSource": { "type": "string" },
          "orderSide": {
            "type": "string",
            "description": "Can be `ask` or `bid`.",
            "enum": ["ask", "bid"]
          },
          "orderKind": { "type": "string" },
          "orderId": { "type": "string" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "fillSource": { "type": "string" },
          "block": { "type": "number" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": {
            "type": "number",
            "description": "Time added on the blockchain"
          },
          "price": { "$ref": "#/components/schemas/price" },
          "washTradingScore": { "type": "number" },
          "royaltyFeeBps": { "type": "number" },
          "marketplaceFeeBps": { "type": "number" },
          "paidFullRoyalty": { "type": "boolean" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model48" },
          "isDeleted": { "type": "boolean" },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "updatedAt": {
            "type": "string",
            "description": "Time when updated in indexer"
          }
        }
      },
      "Model50": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model49" }
      },
      "getSalesV4Response": {
        "type": "object",
        "properties": {
          "sales": { "$ref": "#/components/schemas/Model50" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model51": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "socialImage": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "icon": { "type": "string" },
          "tokenUrl": { "type": "string" },
          "domain": { "type": "string" }
        }
      },
      "sources": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model51" }
      },
      "getSourcesV1Response": {
        "type": "object",
        "properties": {
          "sources": { "$ref": "#/components/schemas/sources" },
          "continuation": { "type": "string" }
        }
      },
      "Model52": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model53": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model52" }
        }
      },
      "market": {
        "type": "object",
        "properties": {
          "floorAsk": { "$ref": "#/components/schemas/Model53" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        }
      },
      "stats": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "market": { "$ref": "#/components/schemas/market" }
        },
        "required": ["tokenCount", "onSaleCount"]
      },
      "getStatsV1Response": {
        "type": "object",
        "properties": { "stats": { "$ref": "#/components/schemas/stats" } }
      },
      "Model54": {
        "type": "object",
        "description": "Can be null if no active asks.",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model55": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model54" }
        }
      },
      "Model56": {
        "type": "object",
        "description": "Can be null is not active bids",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" }
        }
      },
      "Model57": {
        "type": "object",
        "properties": {
          "floorAsk": { "$ref": "#/components/schemas/Model55" },
          "topBid": { "$ref": "#/components/schemas/Model56" }
        }
      },
      "Model58": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "flaggedTokenCount": { "type": "number" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "market": { "$ref": "#/components/schemas/Model57" }
        },
        "required": ["tokenCount", "onSaleCount", "flaggedTokenCount"]
      },
      "getStatsV2Response": {
        "type": "object",
        "properties": { "stats": { "$ref": "#/components/schemas/Model58" } }
      },
      "Model59": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model40" },
          "topBidValue": { "type": "number" },
          "floorAskPrice": { "type": "number" }
        },
        "required": ["contract", "tokenId"]
      },
      "tokens": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model59" }
      },
      "getTokensV1Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/tokens" } }
      },
      "getTokensV2Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/tokens" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model60": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "slug": { "type": "string" }
        }
      },
      "Model61": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "topBidValue": { "type": "number" },
          "floorAskPrice": { "type": "number" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model62": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model61" }
      },
      "getTokensV3Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model62" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model63": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "media": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "source": { "type": "string" },
          "sourceDomain": { "type": "string" },
          "topBidValue": { "type": "number" },
          "floorAskPrice": { "type": "number" },
          "rarity": { "type": "number" },
          "rarityRank": { "type": "number" },
          "owner": { "type": "string" },
          "isFlagged": { "type": "boolean", "default": false },
          "lastFlagUpdate": { "type": "string" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model64": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model63" }
      },
      "getTokensV4Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model64" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model65": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "kind": { "type": "string" },
          "value": { "type": "string" },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "createdAt": { "type": "string" }
        },
        "required": ["value"]
      },
      "Model66": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model65" }
      },
      "Model67": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "media": { "type": "string" },
          "kind": { "type": "string" },
          "isFlagged": { "type": "boolean", "default": false },
          "lastFlagUpdate": { "type": "string" },
          "lastFlagChange": { "type": "string" },
          "rarity": { "type": "number" },
          "rarityRank": { "type": "number" },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "owner": { "type": "string" },
          "attributes": { "$ref": "#/components/schemas/Model66" }
        },
        "required": ["contract", "tokenId"]
      },
      "dynamicPricing": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["dutch", "pool"] },
          "data": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model68": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "dynamicPricing": { "$ref": "#/components/schemas/dynamicPricing" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model69": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/feeBreakdown" }
        }
      },
      "Model70": {
        "type": "object",
        "properties": {
          "floorAsk": { "$ref": "#/components/schemas/Model68" },
          "topBid": { "$ref": "#/components/schemas/Model69" },
          "royaltiesPaid": { "type": "boolean", "default": false }
        }
      },
      "Model71": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model67" },
          "market": { "$ref": "#/components/schemas/Model70" }
        }
      },
      "Model72": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model71" }
      },
      "getTokensV5Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model72" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model73": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Case sensitive." },
          "kind": {
            "type": "string",
            "description": "Can be `string`, `number`, `date`, or `range`."
          },
          "value": { "type": "string", "description": "Case sensitive." },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "createdAt": { "type": "string" }
        },
        "required": ["value"]
      },
      "Model74": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model73" }
      },
      "Model75": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "imageSmall": { "type": "string" },
          "imageLarge": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "media": { "type": "string" },
          "kind": {
            "type": "string",
            "description": "Can be erc721, erc115, etc."
          },
          "isFlagged": { "type": "boolean", "default": false },
          "lastFlagUpdate": { "type": "string" },
          "lastFlagChange": { "type": "string" },
          "supply": {
            "type": "number",
            "description": "Can be higher than 1 if erc1155"
          },
          "remainingSupply": { "type": "number" },
          "rarity": {
            "type": "number",
            "description": "No rarity for collections over 100k"
          },
          "rarityRank": {
            "type": "number",
            "description": "No rarity rank for collections over 100k"
          },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "lastSale": { "$ref": "#/components/schemas/Model49" },
          "owner": { "type": "string" },
          "attributes": { "$ref": "#/components/schemas/Model74" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model76": {
        "type": "object",
        "description": "Can be null if no active ask.",
        "properties": {
          "kind": { "type": "string", "enum": ["dutch", "pool"] },
          "data": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model77": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "dynamicPricing": { "$ref": "#/components/schemas/Model76" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model78": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Can be `marketplace` or `royalty`."
          },
          "recipient": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "bps": { "type": "number" }
        }
      },
      "Model79": {
        "type": "array",
        "description": "Can be null if no active bids",
        "items": { "$ref": "#/components/schemas/Model78" }
      },
      "Model80": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model79" }
        }
      },
      "Model81": {
        "type": "object",
        "properties": {
          "floorAsk": { "$ref": "#/components/schemas/Model77" },
          "topBid": { "$ref": "#/components/schemas/Model80" }
        }
      },
      "Model82": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model75" },
          "market": { "$ref": "#/components/schemas/Model81" }
        }
      },
      "Model83": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model82" }
      },
      "getTokensV6Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model83" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model84": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model41" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "block": { "type": "number" },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": { "type": "number" },
          "price": { "type": "number" }
        }
      },
      "transfers": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model84" }
      },
      "getTransfersV2Response": {
        "type": "object",
        "properties": {
          "transfers": { "$ref": "#/components/schemas/transfers" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model85": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model41" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": {
            "type": "string",
            "description": "Can be higher than 1 if erc1155."
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "block": { "type": "number" },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": { "type": "number" },
          "isDeleted": { "type": "boolean" },
          "updatedAt": {
            "type": "string",
            "description": "Time when last updated in indexer"
          },
          "price": { "$ref": "#/components/schemas/price" }
        }
      },
      "Model86": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model85" }
      },
      "getTransfersV3Response": {
        "type": "object",
        "properties": {
          "transfers": { "$ref": "#/components/schemas/Model86" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "getApiKeyRateLimitsResponse": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "x-format": { "guid": true } },
          "appName": { "type": "string" },
          "website": { "type": "string" },
          "email": { "type": "string", "x-format": { "email": true } },
          "active": { "type": "boolean" },
          "tier": { "type": "number" },
          "ips": { "$ref": "#/components/schemas/sampleImages" },
          "origins": { "$ref": "#/components/schemas/sampleImages" },
          "permissions": { "$ref": "#/components/schemas/metadata" },
          "createdAt": { "type": "string" }
        }
      },
      "payload": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/metadata" }
      },
      "Model87": {
        "type": "object",
        "properties": {
          "route": { "type": "string" },
          "method": { "type": "string" },
          "allowedRequests": { "type": "number" },
          "perSeconds": { "type": "number" },
          "payload": { "$ref": "#/components/schemas/payload" }
        }
      },
      "rateLimits": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model87" }
      },
      "Model88": {
        "type": "object",
        "properties": {
          "rateLimits": { "$ref": "#/components/schemas/rateLimits" }
        }
      },
      "1day": {
        "type": "object",
        "properties": {
          "mintCount": { "type": "number" },
          "saleCount": { "type": "number" },
          "totalCount": { "type": "number" },
          "mintVolume": { "type": "number" },
          "saleVolume": { "type": "number" },
          "totalVolume": { "type": "number" }
        }
      },
      "Model89": {
        "type": "object",
        "properties": {
          "1day": { "$ref": "#/components/schemas/1day" },
          "7day": { "$ref": "#/components/schemas/1day" }
        }
      },
      "getChainStatsV5Response": {
        "type": "object",
        "properties": { "stats": { "$ref": "#/components/schemas/Model89" } }
      },
      "Model90": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string" },
          "tokenName": { "type": "string" },
          "tokenImage": { "type": "string" }
        }
      },
      "Model91": {
        "type": "object",
        "properties": {
          "collectionId": { "type": "string" },
          "collectionName": { "type": "string" },
          "collectionImage": { "type": "string" }
        }
      },
      "data": {
        "type": "object",
        "properties": {
          "collectionId": { "type": "string" },
          "collectionName": { "type": "string" },
          "tokenName": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model92": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["token"] },
          "data": { "$ref": "#/components/schemas/data" }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "side": { "type": "string", "enum": ["ask", "bid"] },
          "source": { "$ref": "#/components/schemas/metadata" },
          "metadata": { "$ref": "#/components/schemas/Model92" }
        }
      },
      "Model93": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "createdAt": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/order" }
        }
      },
      "activities": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model93" }
      },
      "getCollectionActivityV4Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/activities" }
        }
      },
      "Model94": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model95": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model96": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model94" },
          "collection": { "$ref": "#/components/schemas/Model95" }
        }
      },
      "Model97": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["token"] },
          "data": { "$ref": "#/components/schemas/Model96" }
        }
      },
      "Model98": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "side": { "type": "string", "enum": ["ask", "bid"] },
          "source": { "$ref": "#/components/schemas/metadata" },
          "criteria": { "$ref": "#/components/schemas/Model97" }
        }
      },
      "Model99": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "createdAt": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model98" }
        }
      },
      "Model100": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model99" }
      },
      "getCollectionActivityV5Response": {
        "type": "object",
        "properties": {
          "es": { "type": "boolean", "default": false },
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model100" }
        }
      },
      "Model101": {
        "type": "object",
        "description": "Return native currency unless displayCurrency contract was passed.",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model102": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Possible types returned: `ask`, `ask_cancel`, `bid`, `bid_cancel`, `sale`, `mint, and `transfer`."
          },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "$ref": "#/components/schemas/Model101" },
          "amount": { "type": "number" },
          "timestamp": {
            "type": "number",
            "description": "Time when added on the blockchain."
          },
          "createdAt": {
            "type": "string",
            "description": "Time when added in the indexer."
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "description": "Txn hash from the blockchain.",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model98" }
        }
      },
      "Model103": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model102" }
      },
      "getCollectionActivityV6Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model103" }
        }
      },
      "Model104": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "timestamp": { "type": "number" },
          "volume": { "type": "number" },
          "rank": { "type": "number" },
          "floor_sell_value": {
            "type": "number",
            "description": "Native currency to chain."
          },
          "sales_count": { "type": "number" }
        }
      },
      "Model105": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model104" }
      },
      "getDailyVolumesV1Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model105" }
        }
      },
      "Model106": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "image": { "type": "string" },
          "id": { "type": "string" }
        }
      },
      "Model107": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "type": { "type": "string" },
          "timestamp": { "type": "number" },
          "toAddress": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "collection": { "$ref": "#/components/schemas/Model106" },
          "token": { "$ref": "#/components/schemas/Model106" }
        }
      },
      "recentSales": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model107" }
      },
      "Model108": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Collection id" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "count": { "type": "integer" },
          "volume": { "type": "number" },
          "recentSales": { "$ref": "#/components/schemas/recentSales" }
        }
      },
      "Model109": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model108" }
      },
      "getTopSellingCollectionsV5Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model109" }
        }
      },
      "Model110": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "royalties": { "$ref": "#/components/schemas/royalties" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "floorAsk": { "$ref": "#/components/schemas/floorAsk" },
          "topBid": { "$ref": "#/components/schemas/topBid" },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" }
        }
      },
      "getCollectionDeprecatedV1Response": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model110" }
        }
      },
      "Model111": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "quantityRemaining": { "type": "number" },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "isDynamic": { "type": "boolean" }
        }
      },
      "event": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": [
              "new-order",
              "expiry",
              "sale",
              "cancel",
              "balance-change",
              "approval-change",
              "bootstrap",
              "revalidation",
              "reprice"
            ]
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "txTimestamp": { "type": "number" },
          "createdAt": { "type": "string" }
        }
      },
      "Model112": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model111" },
          "event": { "$ref": "#/components/schemas/event" }
        }
      },
      "events": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model112" }
      },
      "getAsksEventsV2Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/events" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model113": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Order Id" },
          "status": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "quantityRemaining": {
            "type": "number",
            "description": "With ERC1155s, quantity can be higher than 1"
          },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "rawData": { "$ref": "#/components/schemas/metadata" },
          "kind": { "type": "string" },
          "source": { "type": "string" },
          "isDynamic": { "type": "boolean" },
          "criteria": { "$ref": "#/components/schemas/Model97" }
        }
      },
      "Model114": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": [
              "new-order",
              "expiry",
              "sale",
              "cancel",
              "balance-change",
              "approval-change",
              "bootstrap",
              "revalidation",
              "reprice"
            ]
          },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "txTimestamp": {
            "type": "number",
            "description": "Time when added on the blockchain."
          },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          }
        }
      },
      "Model115": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model113" },
          "event": { "$ref": "#/components/schemas/Model114" }
        }
      },
      "Model116": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model115" }
      },
      "getAsksEventsV3Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model116" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "bid": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "criteria": { "$ref": "#/components/schemas/Model97" }
        }
      },
      "Model117": {
        "type": "object",
        "properties": {
          "bid": { "$ref": "#/components/schemas/bid" },
          "event": { "$ref": "#/components/schemas/event" }
        }
      },
      "Model118": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model117" }
      },
      "getBidEventsV1Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model118" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model119": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "kind": { "type": "string" },
          "source": { "type": "string" },
          "criteria": { "$ref": "#/components/schemas/Model97" }
        }
      },
      "Model120": {
        "type": "object",
        "properties": {
          "bid": { "$ref": "#/components/schemas/Model119" },
          "event": { "$ref": "#/components/schemas/event" }
        }
      },
      "Model121": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model120" }
      },
      "getBidEventsV2Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model121" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model122": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Order Id" },
          "status": {
            "type": "string",
            "description": "Can return `active`,  inactive`, `expired`, `canceled`, or `filled`."
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "quantityRemaining": {
            "type": "number",
            "description": "With ERC1155s, quantity can be higher than 1"
          },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "rawData": { "$ref": "#/components/schemas/metadata" },
          "kind": { "type": "string" },
          "source": { "type": "string" },
          "criteria": { "$ref": "#/components/schemas/Model97" }
        }
      },
      "Model123": {
        "type": "object",
        "properties": {
          "bid": { "$ref": "#/components/schemas/Model122" },
          "event": { "$ref": "#/components/schemas/Model114" }
        }
      },
      "Model124": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model123" }
      },
      "getBidEventsV3Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model124" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model125": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model126": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model125" },
          "event": { "$ref": "#/components/schemas/event" }
        }
      },
      "Model127": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model126" }
      },
      "getOrderEventsV1Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model127" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model128": {
        "type": "object",
        "properties": {
          "action": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["complete", "incomplete"] },
          "kind": {
            "type": "string",
            "enum": ["request", "signature", "transaction"]
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["action", "description", "status", "kind"]
      },
      "steps": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model128" }
      },
      "getExecuteBidV2Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/steps" },
          "query": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model129": {
        "type": "object",
        "properties": {
          "action": { "type": "string" },
          "description": { "type": "string" },
          "status": { "type": "string", "enum": ["complete", "incomplete"] },
          "kind": {
            "type": "string",
            "enum": ["request", "signature", "transaction", "confirmation"]
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["action", "description", "status", "kind"]
      },
      "Model130": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model129" }
      },
      "Model131": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": { "type": "number" },
          "source": { "type": "string" },
          "quote": { "type": "number" }
        }
      },
      "path": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model131" }
      },
      "getExecuteBuyV2Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model130" },
          "quote": { "type": "number" },
          "path": { "$ref": "#/components/schemas/path" },
          "query": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model132": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["complete", "incomplete"] },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["status"]
      },
      "items": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model132" }
      },
      "Model133": {
        "type": "object",
        "properties": {
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": { "type": "string", "enum": ["transaction"] },
          "items": { "$ref": "#/components/schemas/items" }
        },
        "required": ["action", "description", "kind", "items"]
      },
      "Model134": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model133" }
      },
      "Model135": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": { "type": "number" },
          "source": { "type": "string" },
          "currency": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "quote": { "type": "number" },
          "rawQuote": { "type": "string", "pattern": "^[0-9]+$" }
        }
      },
      "Model136": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model135" }
      },
      "getExecuteBuyV3Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model134" },
          "path": { "$ref": "#/components/schemas/Model136" }
        }
      },
      "getExecuteCancelV1Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model130" },
          "query": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model137": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["complete", "incomplete"] },
          "data": { "$ref": "#/components/schemas/metadata" },
          "orderIndex": { "type": "number" }
        },
        "required": ["status"]
      },
      "Model138": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model137" }
      },
      "Model139": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": { "type": "string", "enum": ["signature", "transaction"] },
          "items": { "$ref": "#/components/schemas/Model138" }
        },
        "required": ["id", "action", "description", "kind", "items"]
      },
      "Model140": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model139" }
      },
      "getExecuteCancelV2Response": {
        "type": "object",
        "properties": { "steps": { "$ref": "#/components/schemas/Model140" } }
      },
      "Model141": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "rank": { "type": "number" },
          "tokenCount": { "type": "string" },
          "liquidity": { "type": "number" },
          "maxTopBuyValue": { "type": "number" },
          "wethBalance": { "type": "number" }
        },
        "required": [
          "rank",
          "tokenCount",
          "liquidity",
          "maxTopBuyValue",
          "wethBalance"
        ]
      },
      "liquidity": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model141" }
      },
      "getUsersLiquidityV1Response": {
        "type": "object",
        "properties": {
          "liquidity": { "$ref": "#/components/schemas/liquidity" }
        }
      },
      "Model142": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "recipient": { "type": "string" },
          "bps": { "type": "string" }
        }
      },
      "Model143": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model142" }
      },
      "Model144": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model143" },
          "status": { "type": "string" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "price",
          "value",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model145": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model144" }
      },
      "getOrdersAllV1Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model145" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model146": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model143" },
          "status": { "type": "string" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model147": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model146" }
      },
      "getOrdersAllV2Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model147" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model148": {
        "type": "object",
        "properties": {
          "collectionName": { "type": "string" },
          "tokenName": { "type": "string" },
          "image": { "type": "string" }
        }
      },
      "Model149": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["token"] },
          "data": { "$ref": "#/components/schemas/Model148" }
        }
      },
      "Model150": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "recipient": { "type": "string" },
          "bps": { "type": "number" }
        }
      },
      "Model151": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model150" }
      },
      "Model152": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "metadata": { "$ref": "#/components/schemas/Model149" },
          "status": { "type": "string" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "price",
          "value",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model153": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model152" }
      },
      "getOrdersAsksV1Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model153" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model154": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "metadata": { "$ref": "#/components/schemas/Model149" },
          "status": { "type": "string" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "expiration": { "type": "number" },
          "isReservoir": { "type": "boolean" },
          "isDynamic": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model155": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model154" }
      },
      "getOrdersAsksV3Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model155" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model156": {
        "type": "object",
        "properties": {
          "start": { "$ref": "#/components/schemas/price" },
          "end": { "$ref": "#/components/schemas/price" }
        }
      },
      "time": {
        "type": "object",
        "properties": {
          "start": { "type": "number" },
          "end": { "type": "number" }
        }
      },
      "Model157": {
        "type": "object",
        "properties": {
          "price": { "$ref": "#/components/schemas/Model156" },
          "time": { "$ref": "#/components/schemas/time" }
        }
      },
      "Model158": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["dutch"] },
          "data": { "$ref": "#/components/schemas/Model157" }
        }
      },
      "Model159": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Can be marketplace or royalty"
          },
          "recipient": { "type": "string" },
          "bps": { "type": "number" }
        }
      },
      "Model160": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model159" }
      },
      "Model161": {
        "type": "object",
        "properties": {
          "price": { "type": "number" },
          "quantity": { "type": "number" }
        }
      },
      "depth": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model161" }
      },
      "Model162": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": {
            "type": "string",
            "description": "This is the `orderKind`."
          },
          "side": {
            "type": "string",
            "description": "Either `buy` or `sell`",
            "enum": ["buy", "sell"]
          },
          "status": {
            "type": "string",
            "description": "Can be `active`, `inactive`, `expired`, `canceled`, or `filled`"
          },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "contractKind": {
            "type": "string",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/Model101" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": {
            "type": "number",
            "description": "With ERC1155s, quantity can be higher than 1"
          },
          "quantityRemaining": {
            "type": "number",
            "description": "With ERC1155s, quantity can be higher than 1"
          },
          "dynamicPricing": { "$ref": "#/components/schemas/Model158" },
          "criteria": { "$ref": "#/components/schemas/Model97" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model160" },
          "expiration": { "type": "number" },
          "isReservoir": { "type": "boolean" },
          "isDynamic": { "type": "boolean" },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "updatedAt": {
            "type": "string",
            "description": "Time when updated in indexer"
          },
          "originatedAt": {
            "type": "string",
            "description": "Time when created by maker"
          },
          "rawData": { "$ref": "#/components/schemas/metadata" },
          "isNativeOffChainCancellable": { "type": "boolean" },
          "depth": { "$ref": "#/components/schemas/depth" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model163": {
        "type": "array",
        "description": "`taker` will have wallet address if private listing.",
        "items": { "$ref": "#/components/schemas/Model162" }
      },
      "getOrdersAsksV4Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model163" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model164": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "status": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "metadata": { "$ref": "#/components/schemas/Model149" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "expiration": { "type": "number" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "price",
          "value",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model165": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model164" }
      },
      "getOrdersBidsV1Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model165" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model166": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "status": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "metadata": { "$ref": "#/components/schemas/Model149" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "expiration": { "type": "number" },
          "isReservoir": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model167": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model166" }
      },
      "getOrdersBidsV3Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model167" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model168": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "status": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "metadata": { "$ref": "#/components/schemas/Model92" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "expiration": { "type": "number" },
          "isReservoir": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model169": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model168" }
      },
      "getOrdersBidsV4Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model169" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model170": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model162" }
      },
      "getOrdersBidsV5Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model170" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "getOrdersDepthV1Response": {
        "type": "object",
        "properties": { "depth": { "$ref": "#/components/schemas/depth" } }
      },
      "Model171": {
        "type": "object",
        "properties": {
          "address": { "type": "string", "description": "Contract address" },
          "count": { "type": "number", "description": "Token count" },
          "owners": { "$ref": "#/components/schemas/sampleImages" }
        }
      },
      "Model172": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model171" }
      },
      "getCommonCollectionsOwnersV1Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model172" }
        }
      },
      "Model173": {
        "type": "object",
        "properties": {
          "address": { "type": "string", "description": "Wallet Address" },
          "count": { "type": "number", "description": "Token Count" },
          "collections": { "$ref": "#/components/schemas/sampleImages" }
        }
      },
      "Model174": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model173" }
      },
      "getCrossCollectionsOwnersV1Response": {
        "type": "object",
        "properties": { "owners": { "$ref": "#/components/schemas/Model174" } }
      },
      "Model175": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" }
        }
      },
      "Model176": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "saleId": { "type": "string" },
          "token": { "$ref": "#/components/schemas/Model175" },
          "orderSource": { "type": "string" },
          "orderSourceDomain": { "type": "string" },
          "orderSide": { "type": "string", "enum": ["ask", "bid"] },
          "orderKind": { "type": "string" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": { "type": "string" },
          "fillSource": { "type": "string" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": { "type": "number" },
          "price": { "type": "number" }
        }
      },
      "Model177": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model176" }
      },
      "getSalesBulkV1Response": {
        "type": "object",
        "properties": {
          "sales": { "$ref": "#/components/schemas/Model177" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model178": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "media": { "type": "string" }
        }
      },
      "Model179": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "createdAt": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model178" },
          "collection": { "$ref": "#/components/schemas/Model95" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model98" }
        }
      },
      "Model180": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model179" }
      },
      "getSearchActivitiesV1Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model180" }
        }
      },
      "Model181": {
        "type": "object",
        "properties": {
          "collectionId": { "type": "string" },
          "contract": { "type": "string" },
          "image": { "type": "string" },
          "name": { "type": "string" },
          "tokenCount": { "type": "string" },
          "allTimeVolume": { "type": "number" },
          "floorAskPrice": { "type": "number" },
          "openseaVerificationStatus": { "type": "string" }
        }
      },
      "Model182": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model181" }
      },
      "getSearchCollectionsV1Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model182" }
        }
      },
      "Model183": {
        "type": "object",
        "description": "Current floor ask price.",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model184": {
        "type": "object",
        "properties": {
          "collectionId": { "type": "string" },
          "contract": { "type": "string" },
          "image": { "type": "string" },
          "name": { "type": "string" },
          "slug": { "type": "string" },
          "allTimeVolume": { "type": "number" },
          "floorAskPrice": { "$ref": "#/components/schemas/Model183" },
          "openseaVerificationStatus": { "type": "string" }
        }
      },
      "Model185": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model184" }
      },
      "getSearchCollectionsV2Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model185" }
        }
      },
      "Model186": {
        "type": "object",
        "properties": {
          "amount": { "type": "string" },
          "recipient": { "type": "string" },
          "bps": { "type": "number" }
        }
      },
      "missingRoyalties": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model186" }
      },
      "Model187": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": { "type": "string" },
          "side": { "type": "string", "enum": ["buy", "sell"] },
          "tokenSetId": { "type": "string" },
          "tokenSetSchemaHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "normalizedPrice": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "quantityFilled": { "type": "number" },
          "quantityRemaining": { "type": "number" },
          "status": { "type": "string" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBps": { "type": "number" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "missingRoyalties": {
            "$ref": "#/components/schemas/missingRoyalties"
          },
          "expiration": { "type": "number" },
          "isReservoir": { "type": "boolean" },
          "isDynamic": { "type": "boolean" },
          "createdAt": { "type": "string" },
          "updatedAt": { "type": "string" },
          "rawData": { "$ref": "#/components/schemas/metadata" }
        },
        "required": [
          "id",
          "kind",
          "side",
          "tokenSetId",
          "tokenSetSchemaHash",
          "maker",
          "taker",
          "validFrom",
          "validUntil",
          "expiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "Model188": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model187" }
      },
      "syncOrdersAsksV1Response": {
        "type": "object",
        "properties": {
          "orders": { "$ref": "#/components/schemas/Model188" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model189": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "image": { "type": "string" },
          "orderId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "price": {
            "type": "number",
            "description": "Native currency of chain"
          },
          "source": { "type": "string" }
        }
      },
      "Model190": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model189" }
      },
      "getTokensBootstrapV1Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model190" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model191": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["value"]
      },
      "Model192": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model191" }
      },
      "Model193": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "kind": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model40" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "owner": { "type": "string" },
          "attributes": { "$ref": "#/components/schemas/Model192" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model194": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model195": {
        "type": "object",
        "properties": {
          "floorAsk": { "$ref": "#/components/schemas/Model194" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        }
      },
      "Model196": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model193" },
          "market": { "$ref": "#/components/schemas/Model195" }
        }
      },
      "Model197": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model196" }
      },
      "getTokensDetailsV2Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model197" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model198": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "kind": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "owner": { "type": "string" },
          "attributes": { "$ref": "#/components/schemas/Model192" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model199": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model198" },
          "market": { "$ref": "#/components/schemas/Model195" }
        }
      },
      "Model200": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model199" }
      },
      "getTokensDetailsV3Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model200" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model201": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" }
        },
        "required": ["value"]
      },
      "Model202": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model201" }
      },
      "Model203": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "image": { "type": "string" },
          "media": { "type": "string" },
          "kind": { "type": "string" },
          "isFlagged": { "type": "boolean", "default": false },
          "lastFlagUpdate": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model60" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "owner": { "type": "string" },
          "attributes": { "$ref": "#/components/schemas/Model202" }
        },
        "required": ["contract", "tokenId"]
      },
      "Model204": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model203" },
          "market": { "$ref": "#/components/schemas/Model195" }
        }
      },
      "Model205": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model204" }
      },
      "getTokensDetailsV4Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model205" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "getTokensFloorV1Response": {
        "type": "object",
        "properties": {
          "tokens": {
            "type": "object",
            "properties": { "string": { "type": "number" } }
          }
        }
      },
      "Model206": {
        "type": "array",
        "items": { "type": "string", "pattern": "^[0-9]+$" }
      },
      "getTokensIdsV1Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model206" },
          "continuation": { "type": "string", "pattern": "^[0-9]+$" }
        }
      },
      "Model207": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "token": { "$ref": "#/components/schemas/Model175" },
          "from": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "amount": {
            "type": "string",
            "description": "Can be more than 1 if erc1155."
          },
          "block": { "type": "number" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "timestamp": { "type": "number" },
          "isDeleted": { "type": "boolean" },
          "updatedAt": {
            "type": "string",
            "description": "Time when updated in indexer"
          }
        }
      },
      "Model208": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model207" }
      },
      "getTransfersBulkV1Response": {
        "type": "object",
        "properties": {
          "transfers": { "$ref": "#/components/schemas/Model208" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model209": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model210": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model209" }
      },
      "getUserActivityV2Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "number" },
          "activities": { "$ref": "#/components/schemas/Model210" }
        }
      },
      "Model211": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "createdAt": { "type": "string" }
        }
      },
      "Model212": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model211" }
      },
      "getUserActivityV3Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model212" }
        }
      },
      "Model213": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/order" },
          "createdAt": { "type": "string" }
        }
      },
      "Model214": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model213" }
      },
      "getUserActivityV4Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model214" }
        }
      },
      "Model215": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string" },
          "tokenName": { "type": "string" },
          "tokenImage": { "type": "string" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "tokenRarityScore": { "type": "number" },
          "tokenRarityRank": { "type": "number" },
          "tokenMedia": { "type": "string" }
        }
      },
      "Model216": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model215" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model98" },
          "createdAt": { "type": "string" }
        }
      },
      "Model217": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model216" }
      },
      "getUserActivityV5Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model217" }
        }
      },
      "Model218": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string" },
          "tokenName": { "type": "string" },
          "tokenImage": { "type": "string" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "tokenRarityScore": {
            "type": "number",
            "description": "No rarity for collections over 100k"
          },
          "tokenRarityRank": {
            "type": "number",
            "description": "No rarity rank for collections over 100k"
          },
          "tokenMedia": { "type": "string" }
        }
      },
      "Model219": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Possible types returned: `ask`, `ask_cancel`, `bid`, `bid_cancel`, `sale`, `mint, and `transfer`."
          },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "$ref": "#/components/schemas/Model101" },
          "amount": { "type": "number" },
          "timestamp": {
            "type": "number",
            "description": "Time when added on the blockchain."
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model218" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "description": "Txn hash from the blockchain.",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model98" },
          "createdAt": { "type": "string" }
        }
      },
      "Model220": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model219" }
      },
      "getUserActivityV6Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model220" }
        }
      },
      "Model221": {
        "type": "object",
        "description": "Marketplace Fee",
        "properties": { "bps": { "type": "number" } }
      },
      "Model222": {
        "type": "object",
        "properties": {
          "minBps": { "type": "number" },
          "maxBps": { "type": "number" }
        }
      },
      "supportedBidCurrencies": {
        "type": "array",
        "description": "erc20 contract addresses",
        "items": { "type": "string" }
      },
      "Model223": {
        "type": "object",
        "properties": {
          "address": { "type": "string" },
          "decimals": { "type": "number" },
          "name": { "type": "string" },
          "symbol": { "type": "string" }
        }
      },
      "paymentTokens": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model223" }
      },
      "Model224": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "domain": { "type": "string" },
          "imageUrl": { "type": "string" },
          "fee": { "$ref": "#/components/schemas/Model221" },
          "royalties": { "$ref": "#/components/schemas/Model222" },
          "orderbook": { "type": "string" },
          "orderKind": { "type": "string" },
          "listingEnabled": { "type": "boolean" },
          "customFeesSupported": { "type": "boolean" },
          "minimumBidExpiry": { "type": "number" },
          "minimumPrecision": { "type": "string" },
          "collectionBidSupported": { "type": "boolean" },
          "supportedBidCurrencies": {
            "$ref": "#/components/schemas/supportedBidCurrencies"
          },
          "paymentTokens": { "$ref": "#/components/schemas/paymentTokens" }
        }
      },
      "Model225": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model224" }
      },
      "Model226": {
        "type": "object",
        "properties": {
          "marketplaces": { "$ref": "#/components/schemas/Model225" }
        }
      },
      "Model227": {
        "type": "object",
        "properties": {
          "value": { "type": "number" },
          "timestamp": { "type": "number" }
        },
        "required": ["value", "timestamp"]
      },
      "lastBuys": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model227" }
      },
      "floorAskPrices": { "type": "array", "items": { "type": "number" } },
      "Model228": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" },
          "tokenCount": { "type": "number" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "lastBuys": { "$ref": "#/components/schemas/lastBuys" },
          "lastSells": { "$ref": "#/components/schemas/lastBuys" },
          "floorAskPrices": { "$ref": "#/components/schemas/floorAskPrices" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        },
        "required": ["key", "value", "tokenCount"]
      },
      "Model229": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model228" }
      },
      "getCollectionAttributesV1Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model229" }
        }
      },
      "Model230": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "side": { "type": "string", "enum": ["ask", "bid"] },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model231": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "createdAt": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "order": { "$ref": "#/components/schemas/Model230" }
        }
      },
      "Model232": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model231" }
      },
      "getCollectionActivityV3Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model232" }
        }
      },
      "Model233": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "createdAt": { "type": "string" },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model234": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model233" }
      },
      "getCollectionActivityV2Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model234" }
        }
      },
      "Model235": {
        "type": "object",
        "properties": {
          "value": { "type": "number" },
          "quantity": { "type": "number" }
        }
      },
      "topBids": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model235" }
      },
      "getCollectionTopBidsV1Response": {
        "type": "object",
        "properties": { "topBids": { "$ref": "#/components/schemas/topBids" } }
      },
      "Model236": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "number" },
          "ownerCount": {
            "type": "number",
            "description": "The amount of owners that have the same `tokenCount`."
          }
        }
      },
      "ownersDistribution": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model236" }
      },
      "getCollectionOwnersDistributionV1Response": {
        "type": "object",
        "properties": {
          "ownersDistribution": {
            "$ref": "#/components/schemas/ownersDistribution"
          }
        }
      },
      "Model237": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "number" },
          "ownerCount": {
            "type": "number",
            "description": "The amount of owners with the same `tokenCount`."
          }
        }
      },
      "Model238": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model237" }
      },
      "getCollectionsSetOwnersDistributionV1Response": {
        "type": "object",
        "properties": {
          "ownersDistribution": { "$ref": "#/components/schemas/Model238" }
        }
      },
      "Model239": {
        "type": "object",
        "properties": { "id": { "type": "string" } }
      },
      "Model240": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model241": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": [
              "new-order",
              "expiry",
              "sale",
              "cancel",
              "balance-change",
              "approval-change",
              "bootstrap",
              "revalidation",
              "reprice"
            ]
          },
          "previousPrice": { "type": "number" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "txTimestamp": { "type": "number" },
          "createdAt": { "type": "string" }
        }
      },
      "Model242": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model239" },
          "floorAsk": { "$ref": "#/components/schemas/Model240" },
          "event": { "$ref": "#/components/schemas/Model241" }
        }
      },
      "Model243": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model242" }
      },
      "getCollectionsFloorAskV1Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model243" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model244": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model245": {
        "type": "object",
        "properties": {
          "id": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": [
              "new-order",
              "expiry",
              "sale",
              "cancel",
              "balance-change",
              "approval-change",
              "bootstrap",
              "revalidation",
              "reprice"
            ]
          },
          "previousPrice": { "type": "number" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "txTimestamp": {
            "type": "number",
            "description": "Time when added on the blockchain."
          },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          }
        }
      },
      "Model246": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model239" },
          "floorAsk": { "$ref": "#/components/schemas/Model244" },
          "event": { "$ref": "#/components/schemas/Model245" }
        }
      },
      "Model247": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model246" }
      },
      "getCollectionsFloorAskV2Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model247" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model248": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model249": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model239" },
          "topBid": { "$ref": "#/components/schemas/Model248" },
          "event": { "$ref": "#/components/schemas/Model241" }
        }
      },
      "Model250": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model249" }
      },
      "getCollectionsTopbidV1Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model250" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model251": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "price": { "$ref": "#/components/schemas/price" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model252": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model239" },
          "topBid": { "$ref": "#/components/schemas/Model251" },
          "event": { "$ref": "#/components/schemas/Model245" }
        }
      },
      "Model253": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model252" }
      },
      "getCollectionsTopbidV2Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model253" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model254": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "price": { "type": "number" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" }
        }
      },
      "Model255": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model175" },
          "floorAsk": { "$ref": "#/components/schemas/Model254" },
          "event": { "$ref": "#/components/schemas/Model241" }
        }
      },
      "Model256": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model255" }
      },
      "getTokensFloorAskV2Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model256" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model257": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "type": "string" },
          "isDynamic": { "type": "boolean" }
        }
      },
      "Model258": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model175" },
          "floorAsk": { "$ref": "#/components/schemas/Model257" },
          "event": { "$ref": "#/components/schemas/Model241" }
        }
      },
      "Model259": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model258" }
      },
      "getTokensFloorAskV3Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model259" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model260": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "nonce": { "type": "string", "pattern": "^[0-9]+$" },
          "price": { "$ref": "#/components/schemas/price" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "dynamicPricing": { "$ref": "#/components/schemas/dynamicPricing" },
          "isDynamic": { "type": "boolean" }
        }
      },
      "Model261": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model175" },
          "floorAsk": { "$ref": "#/components/schemas/Model260" },
          "event": { "$ref": "#/components/schemas/Model245" }
        }
      },
      "Model262": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model261" }
      },
      "getTokensFloorAskV4Response": {
        "type": "object",
        "properties": {
          "events": { "$ref": "#/components/schemas/Model262" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "message": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "payload": { "type": "string" },
          "timestamp": { "type": "number" },
          "chainId": { "type": "string" },
          "signature": { "type": "string" }
        },
        "required": ["id", "payload", "timestamp", "chainId", "signature"]
      },
      "getCollectionBidAskMidpointOracleV1Response": {
        "type": "object",
        "properties": {
          "price": { "type": "number" },
          "message": { "$ref": "#/components/schemas/message" }
        },
        "required": ["price"]
      },
      "Model263": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "payload": { "type": "string" },
          "timestamp": { "type": "number" },
          "signature": { "type": "string" }
        },
        "required": ["id", "payload", "timestamp", "signature"]
      },
      "getCollectionFloorAskOracleV4Response": {
        "type": "object",
        "properties": {
          "price": { "type": "number" },
          "message": { "$ref": "#/components/schemas/Model263" },
          "data": { "type": "string" }
        },
        "required": ["price"]
      },
      "getCollectionFloorAskOracleV6Response": {
        "type": "object",
        "properties": {
          "price": { "type": "number" },
          "message": { "$ref": "#/components/schemas/message" },
          "data": { "type": "string" }
        },
        "required": ["price"]
      },
      "getCollectionTopBidOracleV2Response": {
        "type": "object",
        "properties": {
          "price": { "type": "number" },
          "message": { "$ref": "#/components/schemas/Model263" }
        },
        "required": ["price"]
      },
      "Model264": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
          },
          "isFlagged": { "type": "boolean" },
          "lastTransferTime": { "type": "number" },
          "message": { "$ref": "#/components/schemas/Model263" }
        },
        "required": ["token", "isFlagged", "lastTransferTime"]
      },
      "messages": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model264" }
      },
      "getTokenStatusOracleV2Response": {
        "type": "object",
        "properties": {
          "messages": { "$ref": "#/components/schemas/messages" }
        }
      },
      "Model265": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string", "pattern": "^[0-9]+$" },
          "lastFlagChange": { "type": "string" },
          "isFlagged": { "type": "boolean", "default": false },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["tokenId", "contract"]
      },
      "Model266": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model265" }
      },
      "getFlaggedTokensV1Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model266" },
          "continuation": { "type": "string" }
        }
      },
      "getTokenActivityV4Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "string" },
          "activities": { "$ref": "#/components/schemas/Model100" }
        }
      },
      "getTransactionSyncedV1Response": {
        "type": "object",
        "properties": { "synced": { "type": "boolean" } },
        "required": ["synced"]
      },
      "Model267": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "imageUrl": { "type": "string" },
          "floorAskPrice": { "type": "number" }
        }
      },
      "Model268": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" }
        }
      },
      "Model269": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "kind": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "lastBuy": { "$ref": "#/components/schemas/lastBuy" },
          "lastSell": { "$ref": "#/components/schemas/lastBuy" },
          "rarityScore": { "type": "number" },
          "rarityRank": { "type": "number" },
          "media": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model267" },
          "topBid": { "$ref": "#/components/schemas/Model268" },
          "lastAppraisalValue": { "type": "number" }
        }
      },
      "Model270": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "dynamicPricing": { "$ref": "#/components/schemas/Model158" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model271": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAsk": { "$ref": "#/components/schemas/Model270" },
          "acquiredAt": { "type": "string" }
        }
      },
      "Model272": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model269" },
          "ownership": { "$ref": "#/components/schemas/Model271" }
        }
      },
      "Model273": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model272" }
      },
      "getUserTokensV6Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model273" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model274": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model267" },
          "topBid": { "$ref": "#/components/schemas/Model268" }
        }
      },
      "Model275": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAskPrice": { "$ref": "#/components/schemas/price" },
          "acquiredAt": { "type": "string" }
        }
      },
      "Model276": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model274" },
          "ownership": { "$ref": "#/components/schemas/Model275" }
        }
      },
      "Model277": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model276" }
      },
      "getUserTokensV4Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model277" } }
      },
      "Model278": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model267" }
        }
      },
      "Model279": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAskPrice": { "type": "number" },
          "acquiredAt": { "type": "string" }
        }
      },
      "Model280": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model278" },
          "ownership": { "$ref": "#/components/schemas/Model279" }
        }
      },
      "Model281": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model280" }
      },
      "getUserTokensV2Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model281" } }
      },
      "set": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Model149" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "image": { "type": "string" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" }
        }
      },
      "primaryOrder": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "value": { "type": "number" },
          "expiration": { "type": "number" }
        }
      },
      "Model282": {
        "type": "object",
        "properties": {
          "set": { "$ref": "#/components/schemas/set" },
          "primaryOrder": { "$ref": "#/components/schemas/primaryOrder" },
          "totalValid": { "type": "number" }
        }
      },
      "positions": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model282" }
      },
      "getUserPositionsV1Response": {
        "type": "object",
        "properties": {
          "positions": { "$ref": "#/components/schemas/positions" }
        }
      },
      "Model283": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "slug": { "type": "string" },
          "createdAt": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "openseaVerificationStatus": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "topBidSourceDomain": { "type": "string" },
          "rank": { "$ref": "#/components/schemas/rank" },
          "volume": { "$ref": "#/components/schemas/rank" },
          "volumeChange": { "$ref": "#/components/schemas/volumeChange" },
          "floorSale": { "$ref": "#/components/schemas/volumeChange" }
        }
      },
      "Model284": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "liquidCount": { "type": "string" }
        }
      },
      "Model285": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model283" },
          "ownership": { "$ref": "#/components/schemas/Model284" }
        }
      },
      "Model286": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model285" }
      },
      "getUserCollectionsV2Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model286" }
        }
      },
      "Model287": {
        "type": "object",
        "properties": {
          "type": { "type": "string" },
          "fromAddress": { "type": "string" },
          "toAddress": { "type": "string" },
          "price": { "type": "number" },
          "amount": { "type": "number" },
          "timestamp": { "type": "number" },
          "token": { "$ref": "#/components/schemas/Model90" },
          "collection": { "$ref": "#/components/schemas/Model91" },
          "txHash": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{64}$",
            "x-convert": { "case": "lower" }
          },
          "logIndex": { "type": "number" },
          "batchIndex": { "type": "number" }
        }
      },
      "Model288": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model287" }
      },
      "getUserActivityV1Response": {
        "type": "object",
        "properties": {
          "continuation": { "type": "number" },
          "activities": { "$ref": "#/components/schemas/Model288" }
        }
      },
      "Model289": {
        "type": "object",
        "properties": {
          "imageUrl": { "type": "string" },
          "discordUrl": { "type": "string" },
          "description": { "type": "string" },
          "externalUrl": { "type": "string" },
          "bannerImageUrl": { "type": "string" },
          "twitterUsername": { "type": "string" }
        }
      },
      "Model290": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/Model289" },
          "floorAskPrice": { "type": "number" },
          "topBidValue": { "type": "number" }
        }
      },
      "Model291": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model290" },
          "ownership": { "$ref": "#/components/schemas/Model284" }
        }
      },
      "Model292": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model291" }
      },
      "getUserCollectionsV1Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model292" }
        }
      },
      "Model293": {
        "type": "object",
        "description": "Current floor ask price",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model294": {
        "type": "object",
        "description": "Top bid offer currently if offer is valid",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model295": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Collection Id" },
          "slug": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "banner": { "type": "string" },
          "discordUrl": { "type": "string" },
          "externalUrl": { "type": "string" },
          "twitterUsername": { "type": "string" },
          "openseaVerificationStatus": { "type": "string" },
          "description": { "type": "string" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "tokenCount": {
            "type": "string",
            "description": "Total token count"
          },
          "tokenSetId": { "type": "string" },
          "primaryContract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "floorAskPrice": { "$ref": "#/components/schemas/Model293" },
          "topBidValue": { "$ref": "#/components/schemas/Model294" },
          "topBidMaker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "topBidSourceDomain": { "type": "string" },
          "rank": { "$ref": "#/components/schemas/Model21" },
          "volume": { "$ref": "#/components/schemas/volume" },
          "volumeChange": { "$ref": "#/components/schemas/Model22" },
          "floorSale": { "$ref": "#/components/schemas/floorSale" },
          "contractKind": {
            "type": "string",
            "description": "Returns `erc721`, `erc1155`, etc."
          }
        }
      },
      "Model296": {
        "type": "object",
        "properties": {
          "collection": { "$ref": "#/components/schemas/Model295" },
          "ownership": { "$ref": "#/components/schemas/Model284" }
        }
      },
      "Model297": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model296" }
      },
      "getUserCollectionsV3Response": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model297" }
        }
      },
      "Model298": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "value": { "type": "number" },
          "schema": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model299": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model40" },
          "topBid": { "$ref": "#/components/schemas/Model298" }
        }
      },
      "Model300": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorSellValue": { "type": "number" },
          "acquiredAt": { "type": "number" }
        }
      },
      "Model301": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model299" },
          "ownership": { "$ref": "#/components/schemas/Model300" }
        }
      },
      "Model302": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model301" }
      },
      "getUserTokensV1Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model302" } }
      },
      "Model303": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "value": { "type": "number" }
        }
      },
      "Model304": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model267" },
          "topBid": { "$ref": "#/components/schemas/Model303" }
        }
      },
      "Model305": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model304" },
          "ownership": { "$ref": "#/components/schemas/Model279" }
        }
      },
      "Model306": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model305" }
      },
      "getUserTokensV3Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model306" } }
      },
      "Model307": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model308": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAsk": { "$ref": "#/components/schemas/Model307" },
          "acquiredAt": { "type": "string" }
        }
      },
      "Model309": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model274" },
          "ownership": { "$ref": "#/components/schemas/Model308" }
        }
      },
      "Model310": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model309" }
      },
      "getUserTokensV5Response": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model310" } }
      },
      "Model311": {
        "type": "object",
        "description": "Can be null if no active asks.",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model312": {
        "type": "object",
        "properties": {
          "bps": { "type": "number" },
          "recipient": { "type": "string" }
        }
      },
      "Model313": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model312" }
      },
      "Model314": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "imageUrl": { "type": "string" },
          "openseaVerificationStatus": { "type": "string" },
          "floorAskPrice": { "$ref": "#/components/schemas/Model311" },
          "royaltiesBps": { "type": "number" },
          "royalties": { "$ref": "#/components/schemas/Model313" }
        }
      },
      "Model315": {
        "type": "object",
        "description": "Can be null if not active bids.",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "source": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model316": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Case sensitive" },
          "kind": {
            "type": "string",
            "description": "Can be `string`, `number, `date, or `range`."
          },
          "value": { "type": "string", "description": "Case sensitive." },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "floorAskPrice": { "type": "number", "description": "Can be null." },
          "topBidValue": { "type": "number", "description": "Can be null." },
          "createdAt": { "type": "string" }
        },
        "required": ["value"]
      },
      "Model317": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model316" }
      },
      "Model318": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "kind": {
            "type": "string",
            "description": "Can be erc721, erc115, etc."
          },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "imageSmall": { "type": "string" },
          "imageLarge": { "type": "string" },
          "metadata": { "$ref": "#/components/schemas/metadata" },
          "supply": {
            "type": "number",
            "description": "Can be higher than one if erc1155."
          },
          "remainingSupply": { "type": "number" },
          "rarityScore": {
            "type": "number",
            "description": "No rarity for collections over 100k"
          },
          "rarityRank": {
            "type": "number",
            "description": "No rarity rank for collections over 100k"
          },
          "media": { "type": "string" },
          "collection": { "$ref": "#/components/schemas/Model314" },
          "lastSale": { "$ref": "#/components/schemas/Model49" },
          "topBid": { "$ref": "#/components/schemas/Model315" },
          "lastAppraisalValue": {
            "type": "number",
            "description": "Can be null."
          },
          "attributes": { "$ref": "#/components/schemas/Model317" }
        }
      },
      "Model319": {
        "type": "object",
        "description": "Can be null if no asks.",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "kind": { "type": "string" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "rawData": { "$ref": "#/components/schemas/metadata" },
          "isNativeOffChainCancellable": { "type": "boolean" }
        }
      },
      "Model320": {
        "type": "object",
        "properties": {
          "tokenCount": { "type": "string" },
          "onSaleCount": { "type": "string" },
          "floorAsk": { "$ref": "#/components/schemas/Model319" },
          "acquiredAt": { "type": "string" }
        }
      },
      "Model321": {
        "type": "object",
        "properties": {
          "token": { "$ref": "#/components/schemas/Model318" },
          "ownership": { "$ref": "#/components/schemas/Model320" }
        }
      },
      "Model322": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model321" }
      },
      "getUserTokensV7Response": {
        "type": "object",
        "properties": {
          "tokens": { "$ref": "#/components/schemas/Model322" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model323": {
        "type": "array",
        "description": "Current floor price ask.",
        "items": { "type": "number" }
      },
      "Model324": {
        "type": "object",
        "properties": {
          "tokenId": { "type": "string" },
          "value": { "type": "number" },
          "timestamp": { "type": "number" }
        },
        "required": ["tokenId", "value", "timestamp"]
      },
      "Model325": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model324" }
      },
      "Model326": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Case sensitive" },
          "value": { "type": "string", "description": "Case sensitive" },
          "tokenCount": {
            "type": "number",
            "description": "Total token count with this attribute."
          },
          "onSaleCount": {
            "type": "number",
            "description": "Token count with this attribute on sale."
          },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "floorAskPrices": { "$ref": "#/components/schemas/Model323" },
          "lastBuys": { "$ref": "#/components/schemas/Model325" },
          "lastSells": { "$ref": "#/components/schemas/Model325" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        },
        "required": ["key", "value", "tokenCount", "onSaleCount"]
      },
      "Model327": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model326" }
      },
      "getAttributesExploreV4Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model327" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model328": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "floorAskPrices": { "$ref": "#/components/schemas/floorAskPrices" },
          "lastSells": { "$ref": "#/components/schemas/Model325" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        },
        "required": ["key", "value", "tokenCount", "onSaleCount"]
      },
      "Model329": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model328" }
      },
      "getAttributesExploreV2Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model329" }
        }
      },
      "Model330": {
        "type": "object",
        "description": "Returned only for attributes with less than 10k tokens",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model331": {
        "type": "object",
        "properties": {
          "value": { "type": "string", "description": "Case sensitive" },
          "count": { "type": "number" },
          "floorAskPrice": { "$ref": "#/components/schemas/Model330" }
        },
        "required": ["value"]
      },
      "Model332": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model331" }
      },
      "Model333": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Case sensitive" },
          "attributeCount": {
            "type": "number",
            "description": "Number of possible attribute kinds"
          },
          "kind": {
            "type": "string",
            "enum": ["string", "number", "date", "range"]
          },
          "minRange": { "type": "number" },
          "maxRange": { "type": "number" },
          "values": { "$ref": "#/components/schemas/Model332" }
        },
        "required": ["key", "kind"]
      },
      "Model334": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model333" }
      },
      "getAttributesAllV4Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model334" }
        }
      },
      "Model335": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "count": { "type": "number" },
          "floorAskPrice": { "type": "number" }
        },
        "required": ["value"]
      },
      "Model336": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model335" }
      },
      "Model337": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "attributeCount": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": ["string", "number", "date", "range"]
          },
          "minRange": { "type": "number" },
          "maxRange": { "type": "number" },
          "values": { "$ref": "#/components/schemas/Model336" }
        },
        "required": ["key", "kind"]
      },
      "Model338": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model337" }
      },
      "getAttributesAllV2Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model338" }
        }
      },
      "Model339": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "count": { "type": "number" },
          "floorAskPrice": {
            "type": "number",
            "description": "Returned only for attributes with less than 10k tokens"
          }
        },
        "required": ["value"]
      },
      "Model340": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model339" }
      },
      "Model341": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "attributeCount": { "type": "number" },
          "kind": {
            "type": "string",
            "enum": ["string", "number", "date", "range"]
          },
          "minRange": { "type": "number" },
          "maxRange": { "type": "number" },
          "values": { "$ref": "#/components/schemas/Model340" }
        },
        "required": ["key", "kind"]
      },
      "Model342": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model341" }
      },
      "getAttributesAllV3Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model342" }
        }
      },
      "Model343": {
        "type": "object",
        "properties": {
          "value": { "type": "string" },
          "count": { "type": "number" },
          "tokens": { "$ref": "#/components/schemas/sampleImages" }
        },
        "required": ["value"]
      },
      "Model344": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model343" }
      },
      "Model345": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "kind": {
            "type": "string",
            "enum": ["string", "number", "date", "range"]
          },
          "values": { "$ref": "#/components/schemas/Model344" }
        },
        "required": ["key", "kind"]
      },
      "Model346": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model345" }
      },
      "getAttributesStaticV1Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model346" }
        }
      },
      "Model347": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" },
          "tokenCount": { "type": "number" },
          "onSaleCount": { "type": "number" },
          "sampleImages": { "$ref": "#/components/schemas/sampleImages" },
          "floorAskPrices": { "$ref": "#/components/schemas/floorAskPrices" },
          "lastBuys": { "$ref": "#/components/schemas/Model325" },
          "lastSells": { "$ref": "#/components/schemas/Model325" },
          "topBid": { "$ref": "#/components/schemas/topBid" }
        },
        "required": ["key", "value", "tokenCount", "onSaleCount"]
      },
      "Model348": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model347" }
      },
      "getAttributesExploreV3Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model348" }
        }
      },
      "getAttributesExploreV5Response": {
        "type": "object",
        "properties": {
          "attributes": { "$ref": "#/components/schemas/Model348" },
          "continuation": {
            "type": "string",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          }
        }
      },
      "Model349": {
        "type": "object",
        "description": "Native currency to chain unless displayCurrency is passed.",
        "properties": {
          "currency": { "$ref": "#/components/schemas/currency" },
          "amount": { "$ref": "#/components/schemas/amount" },
          "netAmount": { "$ref": "#/components/schemas/netAmount" }
        }
      },
      "Model350": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" },
          "imageUrl": { "type": "string" },
          "floorAskPrice": { "$ref": "#/components/schemas/Model349" }
        }
      },
      "Model351": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "floorAskPrice": { "$ref": "#/components/schemas/price" },
          "lastSalePrice": { "$ref": "#/components/schemas/price" },
          "collection": { "$ref": "#/components/schemas/Model350" }
        }
      },
      "Model352": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/Model101" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "createdAt": {
            "type": "string",
            "description": "Time when added to indexer"
          },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "floorDifferencePercentage": {
            "type": "number",
            "description": "Percentage difference between this bid and the current floor price."
          },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model160" },
          "criteria": { "$ref": "#/components/schemas/Model97" },
          "token": { "$ref": "#/components/schemas/Model351" }
        }
      },
      "Model353": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model352" }
      },
      "getUserTopBidsV4Response": {
        "type": "object",
        "properties": {
          "totalTokensWithBids": {
            "type": "number",
            "description": "Amount of token with bids."
          },
          "totalAmount": {
            "type": "number",
            "description": "Amount of currency from all token bids; native currency unless `displayCurrency` passed"
          },
          "topBids": { "$ref": "#/components/schemas/Model353" },
          "continuation": { "type": "string" }
        }
      },
      "Model354": {
        "type": "object",
        "properties": {
          "contract": { "type": "string" },
          "tokenId": { "type": "string" },
          "name": { "type": "string" },
          "image": { "type": "string" },
          "floorAskPrice": { "type": "number" },
          "lastSalePrice": { "type": "number" },
          "collection": { "$ref": "#/components/schemas/Model267" }
        }
      },
      "Model355": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "createdAt": { "type": "string" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "floorDifferencePercentage": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "criteria": { "$ref": "#/components/schemas/Model97" },
          "token": { "$ref": "#/components/schemas/Model354" }
        }
      },
      "Model356": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model355" }
      },
      "getUserTopBidsV2Response": {
        "type": "object",
        "properties": {
          "totalTokensWithBids": { "type": "number" },
          "topBids": { "$ref": "#/components/schemas/Model356" },
          "continuation": { "type": "string" }
        }
      },
      "Model357": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "type": "number" },
          "value": { "type": "number" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "createdAt": { "type": "string" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "floorDifferencePercentage": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "context": { "$ref": "#/components/schemas/Model149" },
          "token": { "$ref": "#/components/schemas/Model354" }
        }
      },
      "Model358": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model357" }
      },
      "getUserTopBidsV1Response": {
        "type": "object",
        "properties": {
          "totalTokensWithBids": { "type": "number" },
          "topBids": { "$ref": "#/components/schemas/Model358" },
          "continuation": { "type": "string" }
        }
      },
      "Model359": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "price": { "$ref": "#/components/schemas/price" },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "createdAt": { "type": "string" },
          "validFrom": { "type": "number" },
          "validUntil": { "type": "number" },
          "floorDifferencePercentage": { "type": "number" },
          "source": { "$ref": "#/components/schemas/metadata" },
          "feeBreakdown": { "$ref": "#/components/schemas/Model151" },
          "criteria": { "$ref": "#/components/schemas/Model97" },
          "token": { "$ref": "#/components/schemas/Model354" }
        }
      },
      "Model360": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model359" }
      },
      "getUserTopBidsV3Response": {
        "type": "object",
        "properties": {
          "totalTokensWithBids": { "type": "number" },
          "totalAmount": { "type": "number" },
          "topBids": { "$ref": "#/components/schemas/Model360" },
          "continuation": { "type": "string" }
        }
      },
      "Model361": {
        "type": "object",
        "properties": {
          "community": { "type": "string", "x-convert": { "case": "lower" } }
        },
        "required": ["community"]
      },
      "putSetCollectionCommunityV1Response": {
        "type": "object",
        "properties": { "message": { "type": "string" } }
      },
      "getNewApiKeyResponse": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "x-format": { "guid": true } }
        },
        "required": ["key"]
      },
      "Model362": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "The collection for which to calculate the rarity, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["collection"]
      },
      "Model363": {
        "type": "object",
        "properties": {
          "key": { "type": "string" },
          "value": { "type": "string" }
        }
      },
      "Model364": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model363" }
      },
      "Model365": {
        "type": "object",
        "properties": {
          "route": {
            "type": "string",
            "description": "The route for which the rule is created"
          },
          "points": { "type": "number" },
          "duration": { "type": "number" },
          "pointsToConsume": { "type": "number" },
          "tier": { "type": "number" },
          "apiKey": {
            "type": "string",
            "default": "",
            "x-format": { "guid": true }
          },
          "method": {
            "type": "string",
            "default": "",
            "enum": ["get", "post", "delete", "put"]
          },
          "payload": { "$ref": "#/components/schemas/Model364" }
        },
        "required": ["route"]
      },
      "Model366": {
        "type": "object",
        "properties": {
          "ruleId": { "type": "number", "description": "The rule ID to delete" }
        },
        "required": ["ruleId"]
      },
      "Model367": {
        "type": "object",
        "properties": {
          "fromBlock": { "type": "number" },
          "toBlock": { "type": "number" }
        },
        "required": ["fromBlock", "toBlock"]
      },
      "contracts": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "x-convert": { "case": "lower" }
        }
      },
      "Model368": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["tokens-floor-sell", "tokens-top-buy"]
          },
          "contracts": { "$ref": "#/components/schemas/contracts" }
        },
        "required": ["kind"]
      },
      "Model369": {
        "type": "object",
        "properties": {
          "by": {
            "type": "string",
            "enum": ["id", "maker", "token", "contract"]
          },
          "id": { "type": "string" },
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "maker": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["by", "id", "token", "maker", "contract"]
      },
      "Model370": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["tokens-floor-sell", "tokens-top-buy"]
          },
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["kind", "token"]
      },
      "Model371": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["address"]
      },
      "Model372": {
        "type": "object",
        "properties": {
          "token": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
        },
        "required": ["token"]
      },
      "Model373": {
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string",
            "description": "The queue name to pause"
          }
        },
        "required": ["queueName"]
      },
      "Model374": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`"
          },
          "refreshKind": {
            "type": "string",
            "default": "full-collection",
            "enum": ["full-collection", "full-collection-by-slug"]
          },
          "cacheOnly": {
            "type": "boolean",
            "description": "If true, will only refresh the collection cache.",
            "default": false
          }
        },
        "required": ["collection"]
      },
      "Model375": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Refresh tokens for the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "backfill": { "type": "boolean", "default": false }
        },
        "required": ["collection"]
      },
      "Model376": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": ["opensea", "simplehash", "centerdev", "soundxyz"]
          },
          "token": {
            "type": "string",
            "description": "Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          }
        },
        "required": ["token"]
      },
      "Model377": {
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string",
            "description": "The queue name to resume"
          }
        },
        "required": ["queueName"]
      },
      "Model378": {
        "type": "object",
        "properties": {
          "collection": { "type": "string" },
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          }
        }
      },
      "Model379": {
        "type": "object",
        "properties": {
          "kind": { "type": "string", "enum": ["all"] },
          "data": { "$ref": "#/components/schemas/Model367" }
        }
      },
      "Model380": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source domain to sync. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
          }
        }
      },
      "Model381": {
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string",
            "description": "The queue name to retry"
          }
        },
        "required": ["queueName"]
      },
      "Model382": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "status": { "type": "string", "enum": ["active", "inactive"] }
        },
        "required": ["id", "status"]
      },
      "Model383": {
        "type": "object",
        "properties": {
          "address": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "domain": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
          }
        },
        "required": ["address", "domain"]
      },
      "routers": {
        "type": "array",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Model383" }
      },
      "Model384": {
        "type": "object",
        "properties": { "routers": { "$ref": "#/components/schemas/routers" } },
        "required": ["routers"]
      },
      "Model385": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Update community for a particular collection, e.g. `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" }
          },
          "community": { "type": "string", "x-convert": { "case": "lower" } },
          "doRetries": { "type": "boolean", "default": false }
        },
        "required": ["collection", "community"]
      },
      "Model386": {
        "type": "object",
        "properties": {
          "days": {
            "type": "integer",
            "description": "If no days are passed, will automatically resync from beginning of time.",
            "default": 0,
            "x-constraint": { "sign": "positive" }
          }
        }
      },
      "Model387": {
        "type": "object",
        "properties": {
          "method": { "type": "string", "enum": ["events"] },
          "events": { "$ref": "#/components/schemas/sampleImages" }
        }
      },
      "Model388": {
        "type": "object",
        "properties": {
          "syncDetails": { "$ref": "#/components/schemas/Model387" },
          "fromBlock": {
            "type": "integer",
            "x-constraint": { "sign": "positive" }
          },
          "toBlock": {
            "type": "integer",
            "x-constraint": { "sign": "positive" }
          },
          "blocksPerBatch": {
            "type": "integer",
            "x-constraint": { "sign": "positive" }
          },
          "skipNonFillWrites": { "type": "boolean", "default": false },
          "backfill": { "type": "boolean", "default": true }
        },
        "required": ["fromBlock", "toBlock"]
      },
      "Model389": {
        "type": "object",
        "properties": {
          "path": { "type": "string" },
          "params": { "type": "string" }
        }
      },
      "ips": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\\.(?!$)|$)){4}$",
          "x-convert": { "case": "lower" }
        }
      },
      "origins": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^https?:\\/\\/(?:[^@\\n]+@)?(?:www\\.)?([^:\\n?]+)",
          "x-convert": { "case": "lower" }
        }
      },
      "Model390": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "The api key to update"
          },
          "tier": { "type": "number" },
          "active": { "type": "boolean" },
          "ips": { "$ref": "#/components/schemas/ips" },
          "origins": { "$ref": "#/components/schemas/origins" }
        }
      },
      "Model391": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "number",
            "description": "The rule ID to update"
          },
          "tier": { "type": "number" },
          "points": { "type": "number" },
          "pointsToConsume": { "type": "number" },
          "duration": { "type": "number" },
          "apiKey": { "type": "string", "x-format": { "guid": true } },
          "method": {
            "type": "string",
            "enum": ["get", "post", "delete", "put"]
          },
          "payload": { "$ref": "#/components/schemas/Model364" }
        },
        "required": ["ruleId"]
      },
      "Model392": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source domain to sync. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
          },
          "icon": { "type": "string" },
          "title": { "type": "string" },
          "optimized": { "type": "boolean" }
        }
      },
      "Model393": {
        "type": "array",
        "minItems": 1,
        "maxItems": 500,
        "items": {
          "type": "string",
          "description": "Array of collections to gather in a set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
          "x-convert": { "case": "lower" }
        }
      },
      "Model394": {
        "type": "object",
        "properties": {
          "collections": { "$ref": "#/components/schemas/Model393" }
        },
        "required": ["collections"]
      },
      "postCreateCollectionsSetV1Response": {
        "type": "object",
        "properties": { "collectionsSetId": { "type": "string" } }
      },
      "Model395": {
        "type": "array",
        "minItems": 1,
        "maxItems": 500,
        "items": {
          "type": "string",
          "description": "Array of contracts to gather in a set. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
          "pattern": "^0x[a-fA-F0-9]{40}$",
          "x-convert": { "case": "lower" }
        }
      },
      "Model396": {
        "type": "object",
        "properties": {
          "contracts": { "$ref": "#/components/schemas/Model395" }
        },
        "required": ["contracts"]
      },
      "postCreateContractsSetV1Response": {
        "type": "object",
        "properties": { "contractsSetId": { "type": "string" } }
      },
      "Model397": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["opensea", "zeroex-v4", "seaport", "x2y2"],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "attribute": {
        "type": "object",
        "properties": {
          "collection": { "type": "string" },
          "key": { "type": "string" },
          "value": { "type": "string" }
        },
        "required": ["collection", "key", "value"]
      },
      "Model398": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model397" },
          "orderbook": {
            "type": "string",
            "default": "reservoir",
            "enum": ["reservoir", "opensea"],
            "x-convert": { "case": "lower" }
          },
          "orderbookApiKey": { "type": "string" },
          "source": {
            "type": "string",
            "description": "The name of the source"
          },
          "attribute": { "$ref": "#/components/schemas/attribute" },
          "collection": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "isNonFlagged": { "type": "boolean" }
        }
      },
      "postOrderV2Response": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "orderId": { "type": "string" },
          "crossPostingOrderId": {
            "type": "string",
            "description": "Only available when posting to external orderbook. Can be used to retrieve the status of a cross-post order."
          },
          "crossPostingOrderStatus": { "type": "string" }
        }
      },
      "Model399": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "opensea",
              "blur",
              "looks-rare-v2",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "alienswap"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "Model400": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model399" },
          "orderbook": {
            "type": "string",
            "default": "reservoir",
            "enum": ["reservoir", "opensea", "looks-rare", "x2y2"],
            "x-convert": { "case": "lower" }
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "source": {
            "type": "string",
            "description": "The source domain",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
          },
          "attribute": { "$ref": "#/components/schemas/attribute" },
          "collection": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "isNonFlagged": { "type": "boolean" }
        }
      },
      "Model401": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "blur",
              "opensea",
              "looks-rare-v2",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "alienswap",
              "payment-processor"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "Model402": {
        "type": "object",
        "properties": {
          "orderIndex": { "type": "number" },
          "merkleProof": { "$ref": "#/components/schemas/sampleImages" }
        },
        "required": ["orderIndex", "merkleProof"]
      },
      "bulkData": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "default": "seaport-v1.5",
            "enum": ["seaport-v1.4", "seaport-v1.5", "alienswap"]
          },
          "data": { "$ref": "#/components/schemas/Model402" }
        }
      },
      "Model403": {
        "type": "object",
        "properties": {
          "order": { "$ref": "#/components/schemas/Model401" },
          "orderbook": {
            "type": "string",
            "default": "reservoir",
            "enum": ["blur", "reservoir", "opensea", "looks-rare", "x2y2"],
            "x-convert": { "case": "lower" }
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "attribute": { "$ref": "#/components/schemas/attribute" },
          "collection": { "type": "string" },
          "tokenSetId": { "type": "string" },
          "isNonFlagged": { "type": "boolean" },
          "bulkData": { "$ref": "#/components/schemas/bulkData" }
        }
      },
      "Model404": {
        "type": "array",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Model403" }
      },
      "Model405": {
        "type": "object",
        "properties": {
          "items": { "$ref": "#/components/schemas/Model404" },
          "source": {
            "type": "string",
            "description": "The source domain",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost"
          }
        }
      },
      "Model406": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "orderId": { "type": "string" },
          "orderIndex": { "type": "number" },
          "crossPostingOrderId": {
            "type": "string",
            "description": "Only available when posting to external orderbook. Can be used to retrieve the status of a cross-post order."
          },
          "crossPostingOrderStatus": {
            "type": "string",
            "description": "Current cross-post order status. Responses are `pending`, `posted`, or `failed`."
          }
        }
      },
      "results": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model406" }
      },
      "postOrderV4Response": {
        "type": "object",
        "properties": { "results": { "$ref": "#/components/schemas/results" } }
      },
      "Model407": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "blur",
              "zeroex-v4",
              "x2y2",
              "seaport-v1.4",
              "seaport-v1.5",
              "element",
              "rarible",
              "manifold",
              "looks-rare-v2"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" },
          "originatedAt": { "type": "string" }
        },
        "required": ["kind", "data"]
      },
      "Model408": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model407" }
      },
      "Model409": {
        "type": "object",
        "properties": { "orders": { "$ref": "#/components/schemas/Model408" } }
      },
      "protocol_data": {
        "type": "object",
        "properties": {
          "parameters": { "type": "string" },
          "signature": { "type": "string" }
        }
      },
      "Model410": {
        "type": "object",
        "properties": {
          "protocol_data": { "$ref": "#/components/schemas/protocol_data" }
        }
      },
      "seaport_offers": {
        "type": "array",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Model410" }
      },
      "Model411": {
        "type": "object",
        "properties": {
          "seaport_offers": { "$ref": "#/components/schemas/seaport_offers" }
        }
      },
      "tokenIds": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^\\d+$",
          "x-convert": { "case": "lower" }
        }
      },
      "Model412": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "description": "Contract address. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenIds": { "$ref": "#/components/schemas/tokenIds" }
        },
        "required": ["contract", "tokenIds"]
      },
      "Model413": {
        "type": "array",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model414": {
        "type": "object",
        "properties": { "tokens": { "$ref": "#/components/schemas/Model413" } },
        "required": ["tokens"]
      },
      "Model415": {
        "type": "object",
        "properties": {
          "time": { "type": "string" },
          "apiCallsCount": { "type": "number" },
          "pointsConsumed": { "type": "number" },
          "key": { "type": "string", "x-format": { "guid": true } },
          "route": { "type": "string" },
          "statusCode": { "type": "number" }
        }
      },
      "metrics": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model415" }
      },
      "postApiKeyMetricsResponse": {
        "type": "object",
        "properties": { "metrics": { "$ref": "#/components/schemas/metrics" } }
      },
      "Model416": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" }
          },
          "overrideCoolDown": {
            "type": "boolean",
            "description": "If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.",
            "default": false
          },
          "metadataOnly": {
            "type": "boolean",
            "description": "If true, will only refresh the collection metadata.",
            "default": false
          }
        },
        "required": ["collection"]
      },
      "Model417": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Refresh the given collection. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" }
          },
          "overrideCoolDown": {
            "type": "boolean",
            "description": "If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.",
            "default": false
          },
          "refreshTokens": {
            "type": "boolean",
            "description": "If true, will refresh the metadata for the tokens in the collection.",
            "default": true
          }
        },
        "required": ["collection"]
      },
      "Model418": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Type of permit",
            "enum": ["blur", "opensea"]
          },
          "id": { "type": "string", "description": "Id of the auth challenge" }
        },
        "required": ["kind", "id"]
      },
      "postAuthSignatureV1Response": {
        "type": "object",
        "properties": { "auth": { "type": "string" } }
      },
      "fees": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeBps`) to be bundled within the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model419": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": {
            "type": "string",
            "description": "Bid on a particular token set."
          },
          "collection": {
            "type": "string",
            "description": "Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" }
          },
          "attributeKey": {
            "type": "string",
            "description": "Bid on a particular attribute key. Example: `Composition`"
          },
          "attributeValue": {
            "type": "string",
            "description": "Bid on a particular attribute value. Example: `Teddy (#33)`"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of tokens user is buying. Only compatible with ERC1155 tokens. Example: `5`"
          },
          "weiPrice": {
            "type": "string",
            "description": "Amount bidder is willing to offer in wei. Example: `1000000000000000000`",
            "pattern": "^[0-9]+$"
          },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to create order. Example: `seaport-v1.5`",
            "default": "seaport-v1.5",
            "enum": [
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "looks-rare",
              "looks-rare-v2",
              "x2y2"
            ]
          },
          "orderbook": {
            "type": "string",
            "description": "Orderbook where order is placed. Example: `Reservoir`",
            "default": "reservoir",
            "enum": ["reservoir", "opensea", "looks-rare", "x2y2"]
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "automatedRoyalties": {
            "type": "boolean",
            "description": "If true, royalties will be automatically included.",
            "default": true
          },
          "royaltyBps": {
            "type": "number",
            "description": "The royalty percentage to pay. Only relevant when using automated royalties."
          },
          "fees": { "$ref": "#/components/schemas/fees" },
          "excludeFlaggedTokens": {
            "type": "boolean",
            "description": "If true flagged tokens will be excluded",
            "default": false
          },
          "listingTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "expirationTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "salt": {
            "type": "string",
            "description": "Optional. Random string to make the order unique",
            "pattern": "^[0-9]+$"
          },
          "nonce": {
            "type": "string",
            "description": "Optional. Set a custom nonce",
            "pattern": "^[0-9]+$"
          },
          "currency": {
            "type": "string",
            "default": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": ["weiPrice"]
      },
      "params": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model419" }
      },
      "Model420": {
        "type": "object",
        "properties": {
          "maker": {
            "type": "string",
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "params": { "$ref": "#/components/schemas/params" }
        },
        "required": ["maker"]
      },
      "Model421": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "kind": {
            "type": "string",
            "enum": ["request", "signature", "transaction"]
          },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "items": { "$ref": "#/components/schemas/Model138" }
        },
        "required": ["id", "kind", "action", "description", "items"]
      },
      "Model422": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model421" }
      },
      "getExecuteBidV4Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model422" },
          "query": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "seaport-v1.4": {
        "type": "object",
        "properties": {
          "conduitKey": { "type": "string", "pattern": "^0x[a-fA-F0-9]{64}$" },
          "useOffChainCancellation": { "type": "boolean" },
          "replaceOrderId": { "type": "string" }
        },
        "required": ["useOffChainCancellation"]
      },
      "options": {
        "type": "object",
        "description": "Additional options.",
        "properties": {
          "seaport-v1.4": { "$ref": "#/components/schemas/seaport-v1.4" },
          "seaport-v1.5": { "$ref": "#/components/schemas/seaport-v1.4" }
        }
      },
      "Model423": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeBps`) to be bundled within the order. 1 BPS = 0.01% Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model424": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Bid on a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "tokenSetId": {
            "type": "string",
            "description": "Bid on a particular token set. Cannot be used with cross-posting to OpenSea. Example: `token:CONTRACT:TOKEN_ID` representing a single token within contract, `contract:CONTRACT` representing a whole contract, `range:CONTRACT:START_TOKEN_ID:END_TOKEN_ID` representing a continuous token id range within a contract and `list:CONTRACT:TOKEN_IDS_HASH` representing a list of token ids within a contract."
          },
          "collection": {
            "type": "string",
            "description": "Bid on a particular collection with collection-id. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63`",
            "x-convert": { "case": "lower" }
          },
          "attributeKey": {
            "type": "string",
            "description": "Bid on a particular attribute key. This is case sensitive. Example: `Composition`"
          },
          "attributeValue": {
            "type": "string",
            "description": "Bid on a particular attribute value. This is case sensitive. Example: `Teddy (#33)`"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of tokens to bid on."
          },
          "weiPrice": {
            "type": "string",
            "description": "Amount bidder is willing to offer in the smallest denomination for the specific currency. Example: `1000000000000000000`",
            "pattern": "^[0-9]+$"
          },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to create order. Example: `seaport-v1.5`",
            "default": "seaport-v1.5",
            "enum": [
              "blur",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "looks-rare",
              "looks-rare-v2",
              "x2y2",
              "alienswap",
              "payment-processor"
            ]
          },
          "options": { "$ref": "#/components/schemas/options" },
          "orderbook": {
            "type": "string",
            "description": "Orderbook where order is placed. Example: `Reservoir`",
            "default": "reservoir",
            "enum": ["blur", "reservoir", "opensea", "looks-rare", "x2y2"]
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "automatedRoyalties": {
            "type": "boolean",
            "description": "If true, royalty amounts and recipients will be set automatically.",
            "default": true
          },
          "royaltyBps": {
            "type": "number",
            "description": "Set a maximum amount of royalties to pay, rather than the full amount. Only relevant when using automated royalties. 1 BPS = 0.01% Note: OpenSea does not support values below 50 bps."
          },
          "fees": { "$ref": "#/components/schemas/Model423" },
          "excludeFlaggedTokens": {
            "type": "boolean",
            "description": "If true flagged tokens will be excluded",
            "default": false
          },
          "listingTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "expirationTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "salt": {
            "type": "string",
            "description": "Optional. Random string to make the order unique",
            "pattern": "^[0-9]+$"
          },
          "nonce": {
            "type": "string",
            "description": "Optional. Set a custom nonce",
            "pattern": "^[0-9]+$"
          },
          "currency": {
            "type": "string",
            "default": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": ["weiPrice"]
      },
      "Model425": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model424" }
      },
      "Model426": {
        "type": "object",
        "properties": {
          "maker": {
            "type": "string",
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "blurAuth": {
            "type": "string",
            "description": "Advanced use case to pass personal blurAuthToken; the API will generate one if left empty."
          },
          "params": { "$ref": "#/components/schemas/Model425" }
        },
        "required": ["maker"]
      },
      "Model427": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns `complete` or `incomplete`",
            "enum": ["complete", "incomplete"]
          },
          "tip": { "type": "string" },
          "data": { "$ref": "#/components/schemas/metadata" },
          "orderIndexes": { "$ref": "#/components/schemas/floorAskPrices" }
        },
        "required": ["status"]
      },
      "Model428": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model427" }
      },
      "Model429": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Returns `currency-wrapping`, `currency-approval`, or `order-signature`."
          },
          "kind": {
            "type": "string",
            "description": "Returns `request`, `signature`, or `transaction`.",
            "enum": ["request", "signature", "transaction"]
          },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "items": { "$ref": "#/components/schemas/Model428" }
        },
        "required": ["id", "kind", "action", "description", "items"]
      },
      "Model430": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model429" }
      },
      "Model431": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "orderIndex": { "type": "number" }
        }
      },
      "errors": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model431" }
      },
      "getExecuteBidV5Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model430" },
          "errors": { "$ref": "#/components/schemas/errors" }
        }
      },
      "orderIds": {
        "type": "array",
        "items": { "type": "string", "x-convert": { "case": "lower" } }
      },
      "Model432": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["opensea", "looks-rare", "zeroex-v4", "seaport", "x2y2"],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "rawOrders": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model432" }
      },
      "Model433": {
        "type": "array",
        "description": "Array of tokens user is buying. Example: `tokens[0]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:704 tokens[1]: 0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:979`",
        "items": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
          "x-convert": { "case": "lower" }
        }
      },
      "feesOnTop": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeBps`) to be taken when filling. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:100`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model434": {
        "type": "object",
        "properties": {
          "orderIds": { "$ref": "#/components/schemas/orderIds" },
          "rawOrders": { "$ref": "#/components/schemas/rawOrders" },
          "tokens": { "$ref": "#/components/schemas/Model433" },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "relayer": {
            "type": "string",
            "description": "Address of wallet relaying the filling transaction",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "forceRouter": {
            "type": "boolean",
            "description": "If true, all fills will be executed through the router."
          },
          "currency": {
            "type": "string",
            "default": "0x0000000000000000000000000000000000000000",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "preferredOrderSource": {
            "type": "string",
            "description": "If there are multiple listings with equal best price, prefer this source over others.\nNOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is filling the order, e.g. `myapp.xyz`. This is used to attribute the \"fill source\" of sales in on-chain analytics, to help your app get discovered. Learn more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/feesOnTop" },
          "partial": {
            "type": "boolean",
            "description": "If true, partial orders will be accepted.",
            "default": false
          },
          "skipErrors": {
            "type": "boolean",
            "description": "If true, then skip any errors in processing.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "skipBalanceCheck": {
            "type": "boolean",
            "description": "If true, balance check will be skipped.",
            "default": false
          }
        },
        "required": ["taker"]
      },
      "Model435": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model436": {
        "type": "object",
        "properties": {
          "orderIds": { "$ref": "#/components/schemas/orderIds" },
          "rawOrders": { "$ref": "#/components/schemas/rawOrders" },
          "tokens": { "$ref": "#/components/schemas/Model433" },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "relayer": {
            "type": "string",
            "description": "Address of wallet relaying the filling transaction",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "forceRouter": {
            "type": "boolean",
            "description": "If true, all fills will be executed through the router."
          },
          "currency": {
            "type": "string",
            "default": "0x0000000000000000000000000000000000000000",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "normalizeRoyalties": { "type": "boolean", "default": true },
          "preferredOrderSource": {
            "type": "string",
            "description": "If there are multiple listings with equal best price, prefer this source over others.\nNOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/Model435" },
          "partial": {
            "type": "boolean",
            "description": "If true, any off-chain or on-chain errors will be skipped.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "skipBalanceCheck": {
            "type": "boolean",
            "description": "If true, balance check will be skipped.",
            "default": false
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Override the X2Y2 API key used for filling."
          }
        },
        "required": ["taker"]
      },
      "Model437": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "opensea",
              "looks-rare",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "rarible",
              "sudoswap",
              "nftx"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "Model438": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model437" }
      },
      "Model439": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.\nUnless overridden via the `currency` param, the currency used for any fees on top matches the buy-in currency detected by the backend.\nExample: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model440": {
        "type": "object",
        "properties": {
          "orderIds": { "$ref": "#/components/schemas/orderIds" },
          "rawOrders": { "$ref": "#/components/schemas/Model438" },
          "tokens": { "$ref": "#/components/schemas/Model433" },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is buying. Only compatible when buying a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "relayer": {
            "type": "string",
            "description": "Address of wallet relaying the filling transaction",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "forceRouter": {
            "type": "boolean",
            "description": "If true, all fills will be executed through the router."
          },
          "currency": {
            "type": "string",
            "description": "Currency to buy all listings in.",
            "enum": ["0x0000000000000000000000000000000000000000"]
          },
          "normalizeRoyalties": { "type": "boolean", "default": false },
          "preferredOrderSource": {
            "type": "string",
            "description": "If there are multiple listings with equal best price, prefer this source over others.\nNOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order ID.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/Model439" },
          "partial": {
            "type": "boolean",
            "description": "If true, any off-chain or on-chain errors will be skipped.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "skipBalanceCheck": {
            "type": "boolean",
            "description": "If true, balance check will be skipped.",
            "default": false
          },
          "allowInactiveOrderIds": {
            "type": "boolean",
            "description": "If true, do not filter out inactive orders (only relevant for order id filtering).",
            "default": false
          },
          "excludeEOA": {
            "type": "boolean",
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts.",
            "default": false
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Override the X2Y2 API key used for filling."
          }
        },
        "required": ["taker"]
      },
      "Model441": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": { "type": "string", "enum": ["signature", "transaction"] },
          "items": { "$ref": "#/components/schemas/items" }
        },
        "required": ["id", "action", "description", "kind", "items"]
      },
      "Model442": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model441" }
      },
      "Model443": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "orderId": { "type": "number" }
        }
      },
      "Model444": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model443" }
      },
      "getExecuteBuyV6Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model442" },
          "errors": { "$ref": "#/components/schemas/Model444" },
          "path": { "$ref": "#/components/schemas/Model136" }
        }
      },
      "rawOrder": {
        "type": "object",
        "description": "Optional raw order to fill.",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "opensea",
              "blur-partial",
              "looks-rare",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "rarible",
              "sudoswap",
              "nftx",
              "alienswap"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model445": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "price": { "type": "string", "pattern": "^[0-9]+$" }
        },
        "required": ["orderId"]
      },
      "exclusions": {
        "type": "array",
        "description": "Items to exclude",
        "items": { "$ref": "#/components/schemas/Model445" }
      },
      "Model446": {
        "type": "object",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection to buy.",
            "x-convert": { "case": "lower" }
          },
          "token": {
            "type": "string",
            "description": "Token to buy.",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens to buy.",
            "x-constraint": { "sign": "positive" }
          },
          "orderId": {
            "type": "string",
            "description": "Optional order id to fill.",
            "x-convert": { "case": "lower" }
          },
          "rawOrder": { "$ref": "#/components/schemas/rawOrder" },
          "fillType": {
            "type": "string",
            "description": "Optionally specify a particular fill method. Only relevant when filling via `collection`.",
            "default": "preferMint",
            "enum": ["trade", "mint", "preferMint"]
          },
          "preferredOrderSource": {
            "type": "string",
            "description": "If there are multiple listings with equal best price, prefer this source over others.\nNOTE: if you want to fill a listing that is not the best priced, you need to pass a specific order id or use `exactOrderSource`.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "exactOrderSource": {
            "type": "string",
            "description": "Only consider orders from this source.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "exclusions": { "$ref": "#/components/schemas/exclusions" }
        }
      },
      "Model447": {
        "type": "array",
        "description": "List of items to buy.",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Model446" }
      },
      "Model448": {
        "type": "object",
        "properties": {
          "items": { "$ref": "#/components/schemas/Model447" },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling.",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "relayer": {
            "type": "string",
            "description": "Address of wallet relaying the fill transaction.",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "forceRouter": {
            "type": "boolean",
            "description": "If true, all fills will be executed through the router (where possible)"
          },
          "currency": {
            "type": "string",
            "description": "Currency to be used for purchases.",
            "x-convert": { "case": "lower" }
          },
          "normalizeRoyalties": {
            "type": "boolean",
            "description": "Charge any missing royalties.",
            "default": false
          },
          "allowInactiveOrderIds": {
            "type": "boolean",
            "description": "If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).",
            "default": false
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/Model439" },
          "partial": {
            "type": "boolean",
            "description": "If true, any off-chain or on-chain errors will be skipped.",
            "default": false
          },
          "skipBalanceCheck": {
            "type": "boolean",
            "description": "If true, balance check will be skipped.",
            "default": false
          },
          "excludeEOA": {
            "type": "boolean",
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts. If marked `true`, blur will be excluded.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional custom gas settings. Includes base fee & priority fee in this limit.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional custom gas settings.",
            "pattern": "^[0-9]+$"
          },
          "usePermit": {
            "type": "boolean",
            "description": "When true, will use permit to avoid approvals."
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Optional X2Y2 API key used for filling."
          },
          "openseaApiKey": {
            "type": "string",
            "description": "Optional OpenSea API key used for filling. You don't need to pass your own key, but if you don't, you are more likely to be rate-limited."
          },
          "blurAuth": {
            "type": "string",
            "description": "Advanced use case to pass personal blurAuthToken; the API will generate one if left empty."
          }
        },
        "required": ["items", "taker"]
      },
      "Model449": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response is `complete` or `incomplete`.",
            "enum": ["complete", "incomplete"]
          },
          "tip": { "type": "string" },
          "orderIds": { "$ref": "#/components/schemas/sampleImages" },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["status"]
      },
      "Model450": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model449" }
      },
      "Model451": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": { "type": "string", "enum": ["signature", "transaction"] },
          "items": { "$ref": "#/components/schemas/Model450" }
        },
        "required": ["id", "action", "description", "kind", "items"]
      },
      "Model452": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model451" }
      },
      "Model453": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "orderId": { "type": "string" }
        }
      },
      "Model454": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model453" }
      },
      "Model455": {
        "type": "object",
        "properties": {
          "kind": { "type": "string" },
          "recipient": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "bps": { "type": "number" },
          "amount": { "type": "number" },
          "rawAmount": { "type": "string", "pattern": "^[0-9]+$" }
        }
      },
      "builtInFees": {
        "type": "array",
        "description": "Can be marketplace fees or royalties",
        "items": { "$ref": "#/components/schemas/Model455" }
      },
      "Model456": {
        "type": "array",
        "description": "Can be referral fees.",
        "items": { "$ref": "#/components/schemas/Model455" }
      },
      "Model457": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": { "type": "number" },
          "source": { "type": "string" },
          "currency": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "currencySymbol": { "type": "string" },
          "currencyDecimals": { "type": "number" },
          "quote": { "type": "number" },
          "rawQuote": { "type": "string", "pattern": "^[0-9]+$" },
          "buyInQuote": { "type": "number" },
          "buyInRawQuote": { "type": "string", "pattern": "^[0-9]+$" },
          "totalPrice": { "type": "number" },
          "totalRawPrice": { "type": "string", "pattern": "^[0-9]+$" },
          "builtInFees": { "$ref": "#/components/schemas/builtInFees" },
          "feesOnTop": { "$ref": "#/components/schemas/Model456" }
        }
      },
      "Model458": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model457" }
      },
      "Model459": {
        "type": "object",
        "properties": {
          "itemIndex": { "type": "number" },
          "maxQuantity": { "type": "string", "pattern": "^[0-9]+$" }
        },
        "required": ["itemIndex"]
      },
      "maxQuantities": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model459" }
      },
      "Model460": {
        "type": "object",
        "properties": {
          "itemIndex": { "type": "number" },
          "depth": { "$ref": "#/components/schemas/depth" }
        },
        "required": ["itemIndex"]
      },
      "preview": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model460" }
      },
      "getExecuteBuyV7Response": {
        "type": "object",
        "properties": {
          "requestId": { "type": "string" },
          "steps": { "$ref": "#/components/schemas/Model452" },
          "errors": { "$ref": "#/components/schemas/Model454" },
          "path": { "$ref": "#/components/schemas/Model458" },
          "maxQuantities": { "$ref": "#/components/schemas/maxQuantities" },
          "preview": { "$ref": "#/components/schemas/preview" }
        }
      },
      "Model461": {
        "type": "array",
        "minItems": 1,
        "items": { "type": "string" }
      },
      "Model462": {
        "type": "object",
        "properties": {
          "orderIds": { "$ref": "#/components/schemas/Model461" },
          "maker": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
          "orderKind": {
            "type": "string",
            "enum": [
              "blur",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "looks-rare-v2",
              "zeroex-v4-erc721",
              "zeroex-v4-erc1155",
              "rarible",
              "alienswap"
            ]
          },
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$"
          },
          "blurAuth": { "type": "string" },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price",
            "pattern": "^[0-9]+$"
          }
        }
      },
      "Model463": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "enum": ["complete", "incomplete"] },
          "tip": { "type": "string" },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["status"]
      },
      "Model464": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model463" }
      },
      "Model465": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": { "type": "string", "enum": ["signature", "transaction"] },
          "items": { "$ref": "#/components/schemas/Model464" }
        },
        "required": ["id", "action", "description", "kind", "items"]
      },
      "Model466": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model465" }
      },
      "getExecuteCancelV3Response": {
        "type": "object",
        "properties": { "steps": { "$ref": "#/components/schemas/Model466" } }
      },
      "Model467": {
        "type": "array",
        "description": "Ids of the orders to cancel",
        "minItems": 1,
        "items": { "type": "string" }
      },
      "Model468": {
        "type": "object",
        "properties": {
          "orderIds": { "$ref": "#/components/schemas/Model467" },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to bulk cancel order. Example: `seaport-v1.5`",
            "enum": ["seaport-v1.4", "seaport-v1.5", "alienswap", "blur-bid"]
          }
        },
        "required": ["orderIds", "orderKind"]
      },
      "Model469": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "number",
            "description": "Quanity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5`"
          },
          "weiPrice": {
            "type": "string",
            "description": "Amount seller is willing to sell for in wei. Example: `1000000000000000000`",
            "pattern": "^[0-9]+$"
          },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to create order. Example: `seaport`",
            "default": "seaport",
            "enum": ["zeroex-v4", "seaport", "x2y2"]
          },
          "orderbook": {
            "type": "string",
            "description": "Orderbook where order is placed. Example: `Reservoir`",
            "default": "reservoir",
            "enum": ["opensea", "reservoir", "x2y2"]
          },
          "automatedRoyalties": {
            "type": "boolean",
            "description": "If true, royalties will be automatically included.",
            "default": true
          },
          "fee": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-alternatives": [
              { "type": "string", "pattern": "^[0-9]+$" },
              { "type": "number" },
              { "$ref": "#/x-alt-definitions/fee" },
              { "$ref": "#/x-alt-definitions/Model28" }
            ]
          },
          "feeRecipient": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" },
            "x-alternatives": [
              {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "x-convert": { "case": "lower" }
              },
              { "$ref": "#/x-alt-definitions/feeRecipient" }
            ]
          },
          "listingTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "expirationTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "salt": {
            "type": "string",
            "description": "Optional. Random string to make the order unique",
            "pattern": "^[0-9]+$"
          },
          "nonce": {
            "type": "string",
            "description": "Optional. Set a custom nonce",
            "pattern": "^[0-9]+$"
          },
          "currency": {
            "type": "string",
            "default": "0x0000000000000000000000000000000000000000",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": ["token", "weiPrice"]
      },
      "Model470": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model469" }
      },
      "Model471": {
        "type": "object",
        "properties": {
          "maker": {
            "type": "string",
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of the platform that created the order. Example: `chimpers.xyz`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "params": { "$ref": "#/components/schemas/Model470" }
        },
        "required": ["maker"]
      },
      "Model472": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": ["request", "signature", "transaction"]
          },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "items": { "$ref": "#/components/schemas/Model138" }
        },
        "required": ["kind", "action", "description", "items"]
      },
      "Model473": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model472" }
      },
      "getExecuteListV3Response": {
        "type": "object",
        "properties": { "steps": { "$ref": "#/components/schemas/Model473" } }
      },
      "Model474": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5`"
          },
          "weiPrice": {
            "type": "string",
            "description": "Amount seller is willing to sell for in wei. Example: `1000000000000000000`",
            "pattern": "^[0-9]+$"
          },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to create order. Example: `seaport-v1.5`",
            "default": "seaport-v1.5",
            "enum": [
              "looks-rare",
              "looks-rare-v2",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2"
            ]
          },
          "orderbook": {
            "type": "string",
            "description": "Orderbook where order is placed. Example: `Reservoir`",
            "default": "reservoir",
            "enum": ["opensea", "looks-rare", "reservoir", "x2y2"]
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "automatedRoyalties": {
            "type": "boolean",
            "description": "If true, royalties will be automatically included.",
            "default": true
          },
          "royaltyBps": {
            "type": "number",
            "description": "The royalty percentage to pay. Only relevant when using automated royalties."
          },
          "fees": { "$ref": "#/components/schemas/fees" },
          "listingTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "expirationTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "salt": {
            "type": "string",
            "description": "Optional. Random string to make the order unique",
            "pattern": "^[0-9]+$"
          },
          "nonce": {
            "type": "string",
            "description": "Optional. Set a custom nonce",
            "pattern": "^[0-9]+$"
          },
          "currency": {
            "type": "string",
            "default": "0x0000000000000000000000000000000000000000",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": ["token", "weiPrice"]
      },
      "Model475": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model474" }
      },
      "Model476": {
        "type": "object",
        "properties": {
          "maker": {
            "type": "string",
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "params": { "$ref": "#/components/schemas/Model475" }
        },
        "required": ["maker"]
      },
      "getExecuteListV4Response": {
        "type": "object",
        "properties": { "steps": { "$ref": "#/components/schemas/Model422" } }
      },
      "alienswap": {
        "type": "object",
        "properties": {
          "useOffChainCancellation": { "type": "boolean" },
          "replaceOrderId": { "type": "string" }
        },
        "required": ["useOffChainCancellation"]
      },
      "Model477": {
        "type": "object",
        "description": "Additional options.",
        "properties": {
          "seaport-v1.4": { "$ref": "#/components/schemas/seaport-v1.4" },
          "seaport-v1.5": { "$ref": "#/components/schemas/seaport-v1.4" },
          "alienswap": { "$ref": "#/components/schemas/alienswap" }
        }
      },
      "Model478": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of tokens user is listing. Only compatible with ERC1155 tokens. Example: `5`"
          },
          "weiPrice": {
            "type": "string",
            "description": "Amount seller is willing to sell for in the smallest denomination for the specific currency. Example: `1000000000000000000`",
            "pattern": "^[0-9]+$"
          },
          "orderKind": {
            "type": "string",
            "description": "Exchange protocol used to create order. Example: `seaport-v1.5`",
            "default": "seaport-v1.5",
            "enum": [
              "blur",
              "looks-rare",
              "looks-rare-v2",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "alienswap",
              "payment-processor"
            ]
          },
          "options": { "$ref": "#/components/schemas/Model477" },
          "orderbook": {
            "type": "string",
            "description": "Orderbook where order is placed. Example: `Reservoir`",
            "default": "reservoir",
            "enum": ["blur", "opensea", "looks-rare", "reservoir", "x2y2"]
          },
          "orderbookApiKey": {
            "type": "string",
            "description": "Optional API key for the target orderbook"
          },
          "automatedRoyalties": {
            "type": "boolean",
            "description": "If true, royalty amounts and recipients will be set automatically.",
            "default": true
          },
          "royaltyBps": {
            "type": "number",
            "description": "Set a maximum amount of royalties to pay, rather than the full amount. Only relevant when using automated royalties. 1 BPS = 0.01% Note: OpenSea does not support values below 50 bps."
          },
          "fees": { "$ref": "#/components/schemas/Model423" },
          "listingTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will be listed. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "expirationTime": {
            "type": "string",
            "description": "Unix timestamp (seconds) indicating when listing will expire. Example: `1656080318`",
            "pattern": "^[0-9]{10}$"
          },
          "salt": {
            "type": "string",
            "description": "Optional. Random string to make the order unique",
            "pattern": "^[0-9]+$"
          },
          "nonce": {
            "type": "string",
            "description": "Optional. Set a custom nonce",
            "pattern": "^[0-9]+$"
          },
          "currency": {
            "type": "string",
            "default": "0x0000000000000000000000000000000000000000",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "required": ["token", "weiPrice"]
      },
      "Model479": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model478" }
      },
      "Model480": {
        "type": "object",
        "properties": {
          "maker": {
            "type": "string",
            "description": "Address of wallet making the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is creating the order, e.g. `myapp.xyz`. This is used for filtering, and to attribute the \"order source\" of sales in on-chain analytics, to help your app get discovered. Lean more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "blurAuth": {
            "type": "string",
            "description": "Advanced use case to pass personal blurAuthToken; the API will generate one if left empty."
          },
          "params": { "$ref": "#/components/schemas/Model479" }
        },
        "required": ["maker"]
      },
      "Model481": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns `complete` or `incomplete`.",
            "enum": ["complete", "incomplete"]
          },
          "tip": { "type": "string" },
          "data": { "$ref": "#/components/schemas/metadata" },
          "orderIndexes": { "$ref": "#/components/schemas/floorAskPrices" }
        },
        "required": ["status"]
      },
      "Model482": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model481" }
      },
      "Model483": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Returns `nft-approval` or `order-signature`"
          },
          "kind": {
            "type": "string",
            "description": "Returns `request`, `signature`, or `transaction`.",
            "enum": ["request", "signature", "transaction"]
          },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "items": { "$ref": "#/components/schemas/Model482" }
        },
        "required": ["id", "kind", "action", "description", "items"]
      },
      "Model484": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model483" }
      },
      "getExecuteListV5Response": {
        "type": "object",
        "properties": {
          "steps": { "$ref": "#/components/schemas/Model484" },
          "errors": { "$ref": "#/components/schemas/errors" }
        }
      },
      "Model485": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "description": "Id of the permit" }
        },
        "required": ["id"]
      },
      "Model486": {
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Request id of the associate execute API request"
          },
          "stepId": {
            "type": "string",
            "description": "Step id of the relevant execute item"
          },
          "txHash": {
            "type": "string",
            "description": "Associated transaction hash",
            "pattern": "^0x[a-fA-F0-9]{64}$"
          },
          "errorMessage": {
            "type": "string",
            "description": "Associated error message"
          }
        },
        "required": ["requestId", "stepId"]
      },
      "postExecuteResultsV1Response": {
        "type": "object",
        "properties": { "message": { "type": "string" } },
        "required": ["message"]
      },
      "Model487": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string", "x-convert": { "case": "lower" } },
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "source": {
            "type": "string",
            "description": "Domain of your app that is filling the order, e.g. `myapp.xyz`. This is used to attribute the \"fill source\" of sales in on-chain analytics, to help your app get discovered. Learn more <a href='https://docs.reservoir.tools/docs/calldata-attribution'>here</a>",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          }
        },
        "required": ["token", "taker"]
      },
      "Model488": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string", "x-convert": { "case": "lower" } },
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "normalizeRoyalties": { "type": "boolean", "default": false },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Override the X2Y2 API key used for filling."
          }
        },
        "required": ["token", "taker"]
      },
      "Model489": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "opensea",
              "looks-rare",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["kind", "data"]
      },
      "Model490": {
        "type": "array",
        "description": "List of fees (formatted as `feeRecipient:feeAmount`) to be taken when filling.\nThe currency used for any fees on top matches the accepted bid's currency.\nExample: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00:1000000000000000`",
        "items": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$" }
      },
      "Model491": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string", "x-convert": { "case": "lower" } },
          "rawOrder": { "$ref": "#/components/schemas/Model489" },
          "token": {
            "type": "string",
            "description": "Filter to a particular token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling the order. Example: `0xF296178d553C8Ec21A2fBD2c5dDa8CA9ac905A00`",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens user is selling. Only compatible when selling a single ERC1155 token. Example: `5`",
            "x-constraint": { "sign": "positive" }
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution. Example: `reservoir.market`",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/Model490" },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the path will be returned.",
            "default": false
          },
          "normalizeRoyalties": { "type": "boolean", "default": false },
          "allowInactiveOrderIds": {
            "type": "boolean",
            "description": "If true, do not filter out inactive orders (only relevant for order id filtering).",
            "default": false
          },
          "excludeEOA": {
            "type": "boolean",
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts.",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. Set custom gas price.",
            "pattern": "^[0-9]+$"
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Override the X2Y2 API key used for filling."
          }
        },
        "required": ["token", "taker"]
      },
      "Model492": {
        "type": "object",
        "description": "Optional raw order to sell into.",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "blur-partial",
              "opensea",
              "looks-rare",
              "zeroex-v4",
              "seaport",
              "seaport-v1.4",
              "seaport-v1.5",
              "x2y2",
              "rarible",
              "sudoswap",
              "nftx"
            ],
            "x-convert": { "case": "lower" }
          },
          "data": { "$ref": "#/components/schemas/metadata" }
        }
      },
      "Model493": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to sell.",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of tokens to sell.",
            "default": 1,
            "x-constraint": { "sign": "positive" }
          },
          "orderId": {
            "type": "string",
            "description": "Optional order id to sell into.",
            "x-convert": { "case": "lower" }
          },
          "rawOrder": { "$ref": "#/components/schemas/Model492" },
          "exactOrderSource": {
            "type": "string",
            "description": "Only consider orders from this source.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "exclusions": { "$ref": "#/components/schemas/exclusions" }
        },
        "required": ["token"]
      },
      "Model494": {
        "type": "array",
        "description": "List of items to sell.",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Model493" }
      },
      "Model495": {
        "type": "object",
        "properties": {
          "items": { "$ref": "#/components/schemas/Model494" },
          "taker": {
            "type": "string",
            "description": "Address of wallet filling.",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "source": {
            "type": "string",
            "description": "Filling source used for attribution.",
            "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z0-9]{2,}$|localhost",
            "x-convert": { "case": "lower" }
          },
          "feesOnTop": { "$ref": "#/components/schemas/Model490" },
          "onlyPath": {
            "type": "boolean",
            "description": "If true, only the filling path will be returned.",
            "default": false
          },
          "normalizeRoyalties": {
            "type": "boolean",
            "description": "Charge any missing royalties.",
            "default": false
          },
          "excludeEOA": {
            "type": "boolean",
            "description": "Exclude orders that can only be filled by EOAs, to support filling with smart contracts.",
            "default": false
          },
          "allowInactiveOrderIds": {
            "type": "boolean",
            "description": "If true, inactive orders will not be skipped over (only relevant when filling via a specific order id).",
            "default": false
          },
          "partial": {
            "type": "boolean",
            "description": "If true, any off-chain or on-chain errors will be skipped.",
            "default": false
          },
          "forceRouter": {
            "type": "boolean",
            "description": "If true, filling will be forced to use the common 'approval + transfer' method instead of the approval-less 'on-received hook' method",
            "default": false
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional custom gas settings. Includes base fee & priority fee in this limit.",
            "pattern": "^[0-9]+$"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional custom gas settings.",
            "pattern": "^[0-9]+$"
          },
          "x2y2ApiKey": {
            "type": "string",
            "description": "Optional X2Y2 API key used for filling."
          },
          "openseaApiKey": {
            "type": "string",
            "description": "Optional OpenSea API key used for filling. You don't need to pass your own key, but if you don't, you are more likely to be rate-limited."
          },
          "blurAuth": {
            "type": "string",
            "description": "Optional Blur auth used for filling"
          }
        },
        "required": ["items", "taker"]
      },
      "Model496": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Returns `complete` or `incomplete`.",
            "enum": ["complete", "incomplete"]
          },
          "tip": { "type": "string" },
          "orderIds": { "$ref": "#/components/schemas/sampleImages" },
          "data": { "$ref": "#/components/schemas/metadata" }
        },
        "required": ["status"]
      },
      "Model497": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model496" }
      },
      "Model498": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Returns `auth` or `nft-approval`"
          },
          "action": { "type": "string" },
          "description": { "type": "string" },
          "kind": {
            "type": "string",
            "description": "Returns `signature` or `transaction`.",
            "enum": ["signature", "transaction"]
          },
          "items": { "$ref": "#/components/schemas/Model497" }
        },
        "required": ["id", "action", "description", "kind", "items"]
      },
      "Model499": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model498" }
      },
      "Model500": {
        "type": "object",
        "properties": {
          "orderId": { "type": "string" },
          "contract": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "tokenId": {
            "type": "string",
            "pattern": "^[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "quantity": { "type": "number" },
          "source": { "type": "string" },
          "currency": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "x-convert": { "case": "lower" }
          },
          "currencySymbol": { "type": "string" },
          "currencyDecimals": { "type": "number" },
          "quote": { "type": "number" },
          "rawQuote": { "type": "string", "pattern": "^[0-9]+$" },
          "totalPrice": { "type": "number" },
          "totalRawPrice": { "type": "string", "pattern": "^[0-9]+$" },
          "builtInFees": { "$ref": "#/components/schemas/builtInFees" },
          "feesOnTop": { "$ref": "#/components/schemas/Model456" }
        }
      },
      "Model501": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/Model500" }
      },
      "getExecuteSellV7Response": {
        "type": "object",
        "properties": {
          "requestId": { "type": "string" },
          "steps": { "$ref": "#/components/schemas/Model499" },
          "errors": { "$ref": "#/components/schemas/Model454" },
          "path": { "$ref": "#/components/schemas/Model501" }
        }
      },
      "Model502": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The token to update the flag status for. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "flag": {
            "type": "number",
            "description": "0 - Token is not flagged, 1 - Token is flagged",
            "enum": [0, 1]
          }
        },
        "required": ["token", "flag"]
      },
      "Model503": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Refresh the given token. Example: `0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63:123`",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "liquidityOnly": {
            "type": "boolean",
            "description": "If true, only liquidity data will be refreshed.",
            "default": false
          },
          "overrideCoolDown": {
            "type": "boolean",
            "description": "If true, will force a refresh regardless of cool down. Requires an authorized api key to be passed.",
            "default": false
          }
        },
        "required": ["token"]
      },
      "Model504": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          },
          "router": { "type": "string", "default": "v6", "enum": ["v5", "v6"] }
        }
      },
      "Model505": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}:[0-9]+$",
            "x-convert": { "case": "lower" }
          }
        }
      },
      "Model506": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "x-convert": { "case": "lower" } },
          "skipRevalidation": { "type": "boolean", "default": false }
        },
        "required": ["id"]
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}
